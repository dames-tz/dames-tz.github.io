openapi: 3.0.0
info:
  title: Dames Collect API
  description: Collect Api for dreams project
  contact:
    name: Niafikra Group LTD
    url: http://niafikra.com/
    email: support@niafikra.com
  version: 1.0.0
servers: 
  - url: http://localhost:8080/api/v1/dames
  - url: https://hjf.dames.co.tz/api/v1/dames
  - url: https://hjf.dames.co.tz:8181/api/v1/dames
paths:
  /question:
      description: Create Criterial Screening Question
      post:
        description: Create Question
        security: 
           - basicAuth: []
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateQuestionBody'
        responses:
          200:
            description: OK
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/QuestionBody'
  /question/list:
    description: Fetch all questions
    get:
      description: Fetch all questions both active and non active
      security: 
         - basicAuth: []
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuestionList'
  /question/page:
    description: Fetch all questions with pages
    get:
      description: Fetch all questions both active and non active with pages
      security: 
         - basicAuth: []
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuestionListWithPagination'
  /question/list/active:
    description: Fetch active questions
    get:
      description: Fetch all active questions
      security: 
         - basicAuth: []
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuestionList'
                
                
  /question/answer/{id}:
    description: Get Answer
    get:
      description: Get Single Answer
      security: 
         - basicAuth: []
      parameters:
        - in: path
          description: Pass Answer Id.
          name: id
          required: true
          example: 23
          schema:
            type: integer
      responses:
        202:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnswerBody'
  
  /screening:
    description: Create Screening 
    post:
      description: Post Screening. What to consider agreed key should be check 'true' if the candidate agreed to be enrolled. If checked 'false' screening will never be linked with any enrollment.
      security: 
         - basicAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScreenCreateBody'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScreenBody'
                
  /screening/list:
    description: Fetch all screening
    get:
      description: Fetch all screening
      security: 
         - basicAuth: []
      parameters: 
        - in: query
          description: "Screen date from"
          name: dateFrom
          schema:
            type: string
            format: date('dd-mm-yyyy')
          required: false
        - in: query
          description: "Screen date to"
          name: dateTo
          schema:
            type: string
            format: date('dd-mm-yyyy')
          required: false
        - in: query
          description: "Is eligible"
          name: eligible
          schema:
            type: boolean
            example: true
          required: false
        - in: query
          description: "Enrollment UIC"
          name: enrollmentCode
          schema:
            type: string
            example: "A00000"
          required: false
        - in: query
          description: "AGWY from Street"
          name: street
          schema:
            type: string
            example: "Mazinde St"
          required: false
        - in: query
          description: "Predefined Declining Reason"
          name: decliningReason
          schema:
            type: integer
            example: 23
          required: false
        - in: query
          description: "True to show personal information"
          name: pi
          schema:
            type: boolean
            example: true
          required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScreenList'
                
  /screening/page:
    description: Fetch all screening in oages
    get:
      description: Fetch all screening in pages
      security: 
         - basicAuth: []
      parameters: 
        - in: query
          description: "Screen date from"
          name: dateFrom
          schema:
            type: string
            format: date('dd-mm-yyyy')
          required: false
        - in: query
          description: "Screen date to"
          name: dateTo
          schema:
            type: string
            format: date('dd-mm-yyyy')
          required: false
        - in: query
          description: "Is eligible"
          name: eligible
          schema:
            type: boolean
            example: true
          required: false
        - in: query
          description: "Enrollment UIC"
          name: enrollmentCode
          schema:
            type: string
            example: "A00000"
          required: false
        - in: query
          description: "AGWY from Street"
          name: street
          schema:
            type: string
            example: "Mazinde St"
          required: false
        - in: query
          description: "Predefined Declining Reason"
          name: decliningReason
          schema:
            type: integer
            example: 23
          required: false
        - in: query
          description: "True to show personal information"
          name: pi
          schema:
            type: boolean
            example: true
          required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScreenListWithPages'
                
  /screening/{id}/:
    description: Update Screening 
    put:
      description: Update Screening
      security: 
         - basicAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScreenCreateBody'
      parameters: 
        - in: path
          description: Pass Screen Id.
          name: id
          required: true
          example: 7
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScreenBody'
                
  /screening/{id}:
    description: Delete Screening
    delete:
      description: Delete Not Enrolled Screening
      security: 
         - basicAuth: []
      parameters:
        - in: path
          description: Pass Screening Id.
          name: id
          required: true
          example: 23
          schema:
            type: integer
      responses:
        202:
          description: OK
  
  /screening/count:
    description: Count screens from query
    get:
      description: Count screens from query 
      security: 
         - basicAuth: []
      parameters: 
        - in: query
          description: "Screen date from"
          name: dateFrom
          schema:
            type: string
            format: date('dd-mm-yyyy')
          required: false
        - in: query
          description: "Screen date to"
          name: dateTo
          schema:
            type: string
            format: date('dd-mm-yyyy')
          required: false
        - in: query
          description: "Is eligible"
          name: eligible
          schema:
            type: boolean
            example: true
          required: false
        - in: query
          description: "Enrollment UIC"
          name: enrollmentCode
          schema:
            type: string
            example: "A00000"
          required: false
        - in: query
          description: "AGWY from Street"
          name: street
          schema:
            type: string
            example: "Mazinde St"
          required: false
        - in: query
          description: "Predefined Declining Reason"
          name: decliningReason
          schema:
            type: integer
            example: 23
          required: false
        - in: query
          description: "True to show personal information"
          name: pi
          schema:
            type: boolean
            example: true
          required: false
      responses:
        200:
          description: OK
          content:
             application/text:
              schema:
                type: integer
                example: 100
                
  /user/{userId}/cso:
    description: Get CSo by userID
    get:
      description: Fetch the CSO by user ID
      security: 
         - basicAuth: []
      parameters: 
        - in: path
          description: Pass enrollment user ID.
          name: userId
          required: true
          example: 0
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
               $ref: '#/components/schemas/CSO'
                
  /cso/{id}:
    description: Get CSO
    get:
      description: Get CSO by ID
      security: 
         - basicAuth: []
      parameters: 
        - in: path
          description: Pass CSO ID.
          name: id
          required: true
          example: 0
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CSO'
                
  /cso/code/{code}:
    description: Get CSO
    get:
      description: Get CSO by CODE
      security: 
         - basicAuth: []
      parameters: 
        - in: path
          description: Pass CSO CODE.
          name: code
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CSO'
          
  /cso/list:
    description: List all CSO
    get:
      description: List all CSO
      security: 
         - basicAuth: []
      parameters: 
        - in: query
          description: "CSO identity code"
          name: "code"
          schema:
            type: string
          required: false
        - in: query
          description: "CSO name"
          name: "name"
          schema:
            type: string
          required: false
        - in: query
          description: "Supported Level ID (All CSOs supported by level)"
          name: "levelId"
          schema:
            type: string
          required: false
        - in: query
          description: "PSNU ID. (All CSOs in PSNU)"
          name: "psnuId"
          schema:
            type: string
          required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CSOLists'
                
  /level/list:
    description: List all levels
    get:
      description: List all levels
      security: 
         - basicAuth: []
      parameters: 
        - in: query
          description: "Age from, start point"
          name: "startAgeFrom"
          schema:
            type: integer
            example: 1
          required: false
        - in: query
          description: "Age from, end point"
          name: "startAgeTo"
          schema:
            type: integer
            example: 9
          required: false
        - in: query
          description: "End Age from, start point"
          name: "endAgeFrom"
          schema:
            type: integer
            example: 10
          required: false
        - in: query
          description: "End Age to, end point"
          name: "endAgeTo"
          schema:
            type: integer
            example: 15
          required: false
        - in: query
          description: "Level name"
          name: "name"
          schema:
            type: string
          required: false
        - in: query
          description: "Supported Category ID (All levels under category)"
          name: "categoryId"
          schema:
            type: string
          required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/levelSimpleList'
                
  /level/{id}:
    description: Get level
    get:
      description: Get level by ID
      security: 
         - basicAuth: []
      parameters: 
        - in: path
          description: Pass Level ID.
          name: id
          required: true
          example: 0
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/level'
                
  /level/name/{name}:
    description: Get level
    get:
      description: Get level by Name
      security: 
         - basicAuth: []
      parameters: 
        - in: path
          description: Pass Level Name.
          name: name
          required: true
          example: 0
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/level'
                
  /ward/list:
    description: List all wards
    get:
      description: List all wards
      security: 
         - basicAuth: []
      parameters: 
        - in: query
          description: "Name of ward"
          name: name
          schema:
            type: string
          required: false
        - in: query
          description: "Code of ward"
          name: code
          schema:
            type: string
          required: false
        - in: query
          description: "PSNU ID where wards belong"
          name: psnuId
          schema:
            type: integer
          required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WardList'
                
  /ward/{id}:
    description: Get level
    get:
      description: Get ward by ID
      security: 
         - basicAuth: []
      parameters: 
        - in: path
          description: Pass ward ID.
          name: id
          required: true
          example: 0
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WardObject'
  
  /ward/code/{code}:
    description: Get level
    get:
      description: Get ward by Code
      security: 
         - basicAuth: []
      parameters: 
        - in: path
          description: Pass ward Code.
          name: code
          required: true
          example: 0
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WardObject'

  /period/list:
    description: List all periods
    get:
      description: List all periods
      security: 
         - basicAuth: []
      parameters: 
        - in: query
          description: "Period start date, start point"
          name: startDateFrom
          schema:
            type: string
            format: date("dd-mm-yyyy")
          required: false
        - in: query
          description: "Period start date, end point"
          name: startDateTo
          schema:
            type: string
            format: date("dd-mm-yyyy")
          required: false
        - in: query
          description: "Period end date, start point"
          name: endDateFrom
          schema:
            type: string
            format: date("dd-mm-yyyy")
          required: false
        - in: query
          description: "Period end date, end point"
          name: endDateTo
          schema:
            type: string
            format: date("dd-mm-yyyy")
          required: false
        - in: query
          description: "Period name"
          name: name
          schema:
            type: string
            example: "FY22Q1"
          required: false
        - in: query
          description: "Is period closed/ fetch all period based on is closed flag"
          name: closed
          schema:
            type: boolean
            example: false
          required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListPeriods'
  /period/{id}:
    description: Get period
    get:
      description: Get period ID
      security: 
         - basicAuth: []
      parameters: 
        - in: path
          description: Pass period ID.
          name: id
          required: true
          example: 574
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PeriodObject'
  /service/list:
    description: List Services
    get:
      description: Find services 
      security: 
         - basicAuth: []
      parameters: 
        - in: query
          description: "Period start date, start point"
          name: startDateFrom
          schema:
            type: string
            format: date("dd-mm-yyyy")
          required: false
        - in: query
          description: "Period start date, end point"
          name: startDateTo
          schema:
            type: string
            format: date("dd-mm-yyyy")
          required: false
        - in: query
          description: "Period end date, start point"
          name: endDateFrom
          schema:
            type: string
            format: date("dd-mm-yyyy")
          required: false
        - in: query
          description: "Period end date, end point"
          name: endDateTo
          schema:
            type: string
            format: date("dd-mm-yyyy")
          required: false
        - in: query
          description: "Period name"
          name: name
          schema:
            type: string
            example: "FY22Q1"
          required: false
        - in: query
          description: "Is period closed/ fetch all period based on is closed flag"
          name: closed
          schema:
            type: boolean
            example: false
          required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceSimpleList'
  /service/{id}:
    description: Get Service by ID
    get:
      description: Pass Service Id to fetch Service Object
      security:
        - basicAuth: []
      parameters: 
        - in: path
          description: Pass service id.
          name: id
          required: true
          example: 5
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
  /service/stage/{code}:
    description: Get Service Stage by Code
    get:
      description: Pass Service Stage Code to fetch Stage Object
      security:
        - basicAuth: []
      parameters: 
        - in: path
          description: Pass service stage code.
          name: code
          required: true
          example: "1234"
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Stage'
  /intervention/list:
    description: List Interventions
    get:
      description: List services 
      security: 
         - basicAuth: []
      parameters: 
        - in: query
          description: "All interventions under Category Id"
          name: categoryId
          schema:
            type: integer
            example: 2
          required: false
        - in: query
          description: "All interventions under Level Id"
          name: levelId
          schema:
            type: integer
            example: 0
          required: false
        - in: query
          description: "All interventions has Service Id"
          name: serviceId
          schema:
            type: integer
          required: false
        - in: query
          description: "All interventions is/not mandatory"
          name: mandatory
          schema:
            type: boolean
            example: true
          required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InterventionSimpleList'
  /intervention/page:
    description: List Intervention in page
    get:
      description: List Intervention in pages
      security: 
         - basicAuth: []
      parameters: 
        - in: query
          description: "All interventions under Category Id"
          name: categoryId
          schema:
            type: integer
            example: 2
          required: false
        - in: query
          description: "All interventions under Level Id"
          name: levelId
          schema:
            type: integer
            example: 0
          required: false
        - in: query
          description: "All interventions has Service Id"
          name: serviceId
          schema:
            type: integer
          required: false
        - in: query
          description: "All interventions is/not mandatory"
          name: mandatory
          schema:
            type: boolean
            example: true
          required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InterventionList'
  /intervention/{id}:
    description: Get Intervention by ID
    get:
      description: Pass Intervention Id to fetch Intervention Object
      security:
        - basicAuth: []
      parameters: 
        - in: path
          description: Pass Intervention id.
          name: id
          required: true
          example: 5
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Intervention'
                
  /enrollment/codePattern:
    description: Fetch code pattern
    get: 
      description: Fetch enrollment code pattern. Can help to verify UIC entries pattern from users
      security: 
         - basicAuth: []
      responses:
        200:
          description: OK
          content:
            text/plain:
              schema:
                type: string
                example: ^[0-9]
                
  /enrollment/phoneNumberPattern:
    description: Fetch phone number pattern
    get: 
      description: Fetch enrollment phone number pattern. Can help to verify phone number entry
      security: 
         - basicAuth: []
      responses:
        200:
          description: OK
          content:
            text/plain:
              schema:
                type: string
                example: ^\d{10}$
                
  /enrollment/minimumAge:
    description: get minimum age from level
    get:
      description: get minimum age system supports
      security: 
         - basicAuth: []
      responses:
        200:
          description: OK
          content:
            application/text:
              schema:
                type: integer
                example: 10
                
  /enrollment/maximumAge:
    description: get maximum age from level
    get:
      description: get maximum age system supports
      security: 
         - basicAuth: []
      responses:
        200:
          description: OK
          content:
            application/text:
              schema:
                type: integer
                example: 24
                
  /enrollment:
    description: Create or Update Enrollment
    put:
      description: "Create or Update Enrollment, For new code will create but for existing one will update. So the main identifying component is Code"
      security: 
         - basicAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EnrollmentPostOject'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
               $ref: '#/components/schemas/Enrollment'
               
  /enrollment/{code}/exist:
    description: Check if code exists
    get:
      description: Check if enrollment code exists
      security: 
         - basicAuth: []
      parameters: 
        - in: path
          description: Pass new generated enrollment code 
          name: code
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            text/plain:
              schema:
                type: boolean
                example: true
                
  /enrollment/{code}/:
    description: Get Enrollment
    get:
      description: Get enrollment by code
      security: 
         - basicAuth: []
      parameters: 
        - in: path
          description: Pass enrollment code
          name: code
          required: true
          schema:
            type: string
          example: 123
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Enrollment'
                
  /enrollment/bulk:
    description: Post bulk enrollment.
    post:
      description: Post bulk enrollment. Posting multiple enrollment objects at once
      security: 
         - basicAuth: []
      requestBody:
        content:
          application/json:
                schema:
                  $ref: '#/components/schemas/EnrollmentPostOjectList'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnrollmentList'
                
  /enrollment/list:
    description: Find all enrollments
    get:
      description: Find all posted enrollments
      security: 
         - basicAuth: []
      parameters: 
        - in: query
          description: "Enrolled Date From"
          name: dateFrom
          schema:
            type: string
            format: date("dd-mm-yyyy")
          required: false
        - in: query
          description: "Enrolled Date To"
          name: dateTo
          schema:
            type: string
            format: date("dd-mm-yyyy")
          required: false
        - in: query
          description: "Enrolled from street"
          name: street
          schema:
            type: string
            example: "Mtakuja St"
          required: false
        - in: query
          description: "Enrolled from ward ID"
          name: wardId
          schema:
            type: integer
            example: 123
          required: false
        - in: query
          description: "AGYW firstName"
          name: firstName
          schema:
            type: string
            example: "Jane"
          required: false
        - in: query
          description: "AGYW lastName"
          name: lastName
          schema:
            type: string
            example: "Doe"
          required: false
        - in: query
          description: "Who submited the data. CSO User ID"
          name: creatorId
          schema:
            type: integer
            example: 20
          required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnrollmentList'
                
  /enrollment/page:
    description: List all enrollments in Pages
    get:
      description: List all enrollments in Pages
      security: 
         - basicAuth: []
      parameters: 
        - in: query
          description: "Enrolled Date From"
          name: dateFrom
          schema:
            type: string
            format: date("dd-mm-yyyy")
          required: false
        - in: query
          description: "Enrolled Date To"
          name: dateTo
          schema:
            type: string
            format: date("dd-mm-yyyy")
          required: false
        - in: query
          description: "Enrolled from street"
          name: street
          schema:
            type: string
            example: "Mtakuja St"
          required: false
        - in: query
          description: "Enrolled from ward ID"
          name: wardId
          schema:
            type: integer
            example: 123
          required: false
        - in: query
          description: "AGYW firstName"
          name: firstName
          schema:
            type: string
            example: "Jane"
          required: false
        - in: query
          description: "AGYW lastName"
          name: lastName
          schema:
            type: string
            example: "Doe"
          required: false
        - in: query
          description: "Who submited the data. CSO User ID"
          name: creatorId
          schema:
            type: integer
            example: 20
          required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnrollmentsListWithPagination'
                
  /enrollment/count:
    description: Count enrollments from query
    get:
      description: Count enrollments by query 
      security: 
         - basicAuth: []
      parameters: 
        - in: query
          description: "Enrolled Date From"
          name: dateFrom
          schema:
            type: string
            format: date("dd-mm-yyyy")
          required: false
        - in: query
          description: "Enrolled Date To"
          name: dateTo
          schema:
            type: string
            format: date("dd-mm-yyyy")
          required: false
        - in: query
          description: "Enrolled from street"
          name: street
          schema:
            type: string
            example: "Mtakuja St"
          required: false
        - in: query
          description: "Enrolled from ward ID"
          name: wardId
          schema:
            type: integer
            example: 123
          required: false
        - in: query
          description: "AGYW firstName"
          name: firstName
          schema:
            type: string
            example: "Jane"
          required: false
        - in: query
          description: "AGYW lastName"
          name: lastName
          schema:
            type: string
            example: "Doe"
          required: false
        - in: query
          description: "Who submited the data. CSO User ID"
          name: creatorId
          schema:
            type: integer
            example: 20
          required: false
      responses:
        200:
          description: OK
          content:
             application/text:
              schema:
                type: integer
                example: 10
                
  /encounter:
    description: Create Encounter
    post:
      description: Create Encounter 
      security: 
         - basicAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EncounterPostObject'
      responses:
        201:
          description: CREATED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Encounter'
                
  /encounter/bulk:
    description: Create Encounter in bulk
    post:
      description: Create Encounter in bulk 
      security: 
         - basicAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EncounterPostListObject'
      responses:
        201:
          description: CREATED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncounterList'
                
  /encounter/list:
    description: Find all encounters
    get:
      description: Find all posted encounters by logged user
      security: 
         - basicAuth: []
      parameters: 
        - in: query
          description: "Interventions of Date From"
          name: dateFrom
          schema:
            type: string
            format: date("dd-mm-yyyy")
          required: false
        - in: query
          description: "Interventions of Date To"
          name: dateTo
          schema:
            type: string
            format: date("dd-mm-yyyy")
          required: false
        - in: query
          description: "Intervention took place street"
          name: street
          schema:
            type: string
            example: "Mtakuja St"
          required: false
        - in: query
          description: "Intervention took place ward ID"
          name: wardId
          schema:
            type: integer
            example: 123
          required: false
        - in: query
          description: "Service ID provided"
          name: serviceId
          schema:
            type: integer
            example: 11
          required: false
        - in: query
          description: "Level ID of AGYW"
          name: levelId
          schema:
            type: integer
            example: 112
          required: false
        - in: query
          description: "Who submited the data. CSO User ID"
          name: creatorId
          schema:
            type: integer
            example: 20
          required: false
        - in: query
          description: "Enrollment UIC"
          name: enrollmentCode
          schema:
            type: string
            example: "A00000"
          required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncounterList'
                
  /encounter/count:
    description: Count encounters from query
    get:
      description: Count submitted encounters by login user
      security: 
         - basicAuth: []
      parameters: 
        - in: query
          description: "Interventions of Date From"
          name: dateFrom
          schema:
            type: string
            format: date("dd-mm-yyyy")
          required: false
        - in: query
          description: "Interventions of Date To"
          name: dateTo
          schema:
            type: string
            format: date("dd-mm-yyyy")
          required: false
        - in: query
          description: "Intervention took place street"
          name: street
          schema:
            type: string
            example: "Mtakuja St"
          required: false
        - in: query
          description: "Intervention took place ward ID"
          name: wardId
          schema:
            type: integer
            example: 123
          required: false
        - in: query
          description: "Service ID provided"
          name: serviceId
          schema:
            type: integer
            example: 11
          required: false
        - in: query
          description: "Level ID of AGYW"
          name: levelId
          schema:
            type: integer
            example: 112
          required: false
        - in: query
          description: "Who submited the data. CSO User ID"
          name: creatorId
          schema:
            type: integer
            example: 20
          required: false
        - in: query
          description: "Enrollment UIC"
          name: enrollmentCode
          schema:
            type: string
            example: "A00000"
          required: false
      responses:
        200:
          description: OK
          content:
             application/text:
              schema:
                type: integer
                example: 10
                
  /encounter/page:
    description: Find all encounters in page
    get:
      description: List in pages Encounters
      security: 
         - basicAuth: []
      parameters: 
        - in: query
          description: "Interventions of Date From"
          name: dateFrom
          schema:
            type: string
            format: date("dd-mm-yyyy")
          required: false
        - in: query
          description: "Interventions of Date To"
          name: dateTo
          schema:
            type: string
            format: date("dd-mm-yyyy")
          required: false
        - in: query
          description: "Intervention took place street"
          name: street
          schema:
            type: string
            example: "Mtakuja St"
          required: false
        - in: query
          description: "Intervention took place ward ID"
          name: wardId
          schema:
            type: integer
            example: 123
          required: false
        - in: query
          description: "Service ID provided"
          name: serviceId
          schema:
            type: integer
            example: 11
          required: false
        - in: query
          description: "Level ID of AGYW"
          name: levelId
          schema:
            type: integer
            example: 112
          required: false
        - in: query
          description: "Who submited the data. CSO User ID"
          name: creatorId
          schema:
            type: integer
            example: 20
          required: false
        - in: query
          description: "Enrollment UIC"
          name: enrollmentCode
          schema:
            type: string
            example: "A00000"
          required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncounterListWithPagination'
                
  /encounter/{id}:
    description: Delete Encounter
    delete:
      description: Delete Encounter
      security: 
         - basicAuth: []
      parameters: 
        - in: path
          description: Pass Encounter id
          name: id
          required: true
          schema:
            type: integer
          example: 100
      responses:
        202:
          description: OK
          
  /snu/list:
    description: List SNU
    get:
      description: Find all SNU 
      security: 
         - basicAuth: []
      parameters: 
        - in: query
          description: "Query format can be. ?name=Mbeya&code=S12"
          name: query
          schema:
            $ref: '#/components/schemas/SNUQuery'
          required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SNUList'
                
  /snu/{id}:
    description: Get SNU by ID
    get:
      description: Pass SNU Id to fetch SNU Object
      security:
        - basicAuth: []
      parameters: 
        - in: path
          description: Pass snu id.
          name: id
          required: true
          example: 5
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SNU'
                
  /snu/code/{code}:
    description: Get SNU by CODE
    get:
      description: Pass SNU CODE to fetch SNU Object
      security:
        - basicAuth: []
      parameters: 
        - in: path
          description: Pass snu Code.
          name: code
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SNU'
                
  /psnu/list:
    description: List PSNU
    get:
      description: Find all PSNU 
      security: 
         - basicAuth: []
      parameters: 
        - in: query
          description: "Name of PSNU"
          name: name
          schema:
            type: string
            example: Kyela
        - in: query
          description: "PSNU Code"
          name: code
          schema:
            type: string
            example: KYELA
        - in: query
          description: "SNU where PSNU belongs"
          name: snuId
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PSNUSimpleList'
                
  /psnu/{id}:
    description: Get PSNU by ID
    get:
      description: Pass PSNU Id to fetch PSNU Object
      security:
        - basicAuth: []
      parameters: 
        - in: path
          description: Pass PSNU id.
          name: id
          required: true
          example: 0
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PSNU'
  
  /psnu/code/{code}:
    description: Get PSNU by CODE
    get:
      description: Pass PSNU CODE to fetch PSNU Object
      security:
        - basicAuth: []
      parameters: 
        - in: path
          description: Pass PSNU code.
          name: code
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PSNU'
components:
  securitySchemes:
    basicAuth:    
      type: http
      scheme: basic
  schemas:
    level:
        type: object
        properties:
          id:
            type: integer
          name: 
            type: string
            example: 10-20
          ageForm:
            type: integer
            example: 10
          ageTo:
            type: integer
            example: 20
          category:
            $ref: '#/components/schemas/Category'
    Category:
      type: object
      title: "Category Object"
      properties:
        id:
          type: integer
          example: 2
        name:
          type: string
          example: "INDIVIDUAL"
    levelQuery:
      type: object
      title: "Level Query Params"
      properties:
        name:
          type: string
        startAgeFrom:
          type: integer
          description: "Fill with startAgeTo"
        startAgeTo:
          type: integer
          description: "Fill with startAgeFrom"
        endAgeFrom:
          type: integer
          description: "Fill with endAgeTo"
        endAgeTo:
          type: integer
          description: "Fill with endAgeFrom"
        categoryId:
         type: integer
    levelList:
      type: array
      title: "Level List Object with Pages"
      items:
        properties:
          content:
            type: array
            items:
              $ref: '#/components/schemas/level'
          pageable:
            type: object
            properties:
              sort:
                type: object
                properties:
                  sorted:
                    type: boolean
                    example: false
                  empty:
                    type: boolean
                    example: true
                  unsorted:
                    type: boolean
                    example: true
              pageSize:
                type: integer
                example: 20
              pageNumber:
                type: integer
                example: 0
              offset:
                type: integer
                example: 0
              paged:
                type: boolean
                example: true
              unpaged:
                type: boolean
                example: false
          totalPages: 
            type: integer
            example: 1
          totalElements:
            type: integer
            example: 2
          last:
            type: boolean
            example: true
          number: 
            type: integer
            example: 0
          size:
            type: integer
            example: 0
          numberOfElements:
            type: integer
            example: 2
    levelSimpleList:
      title: "Level List Object"
      type: array
      items:
        $ref: '#/components/schemas/level'
    Stage:
      type: object
      properties:
        id:
          type: integer
          example: 290
        order:
          type: integer
          example: 1
        name:
          type: string
          example: initial
        code:
          type: string
          example: "1234"
    Service:
      type: object
      properties:
        id: 
          type: integer
          example: 5
        name:
          type: string
        code:
          type: string
        category:
          type: string
          example: First category
        stages:
          type: array
          items:
            properties:
              stage: 
                $ref: '#/components/schemas/Stage'
    ServiceSimpleList:
      type: array
      title: "Service Simple List Object"
      items:
        properties:
          name: 
            type: string
          category:
            type: string
          stages:
            $ref: '#/components/schemas/Stage'
    ServiceQuery:
      type: object
      properties:
        name: 
          type: string
        code:
          type: string
    ServiceList:
      type: array
      items:
        properties:
          content:
            type: array
            items:
              $ref: '#/components/schemas/Service'
          pageable:
            type: object
            properties:
              sort:
                type: object
                properties:
                  sorted:
                    type: boolean
                    example: false
                  empty:
                    type: boolean
                    example: true
                  unsorted:
                    type: boolean
                    example: true
              pageSize:
                type: integer
                example: 20
              pageNumber:
                type: integer
                example: 0
              offset:
                type: integer
                example: 0
              paged:
                type: boolean
                example: true
              unpaged:
                type: boolean
                example: false
          totalPages: 
            type: integer
            example: 1
          totalElements:
            type: integer
            example: 2
          last:
            type: boolean
            example: true
          number: 
            type: integer
            example: 0
          size:
            type: integer
            example: 0
          numberOfElements:
            type: integer
            example: 2
    Intervention:
      type: object
      title: "Intervention Object"
      properties:
        level:
          $ref: '#/components/schemas/level'
        category:
          $ref: '#/components/schemas/Category'
        service:
          $ref: '#/components/schemas/Service'
        mandatory:
          type: boolean
          example: true
    InterventionQuery:
      type: object
      title: "Intervention Query Params"
      properties:
        categoryId:
          type: integer
        levelId:
          type: integer
        serviceId:
          type: integer
        mandatory:
          type: boolean
          example: false
    InterventionSimpleList:
      type: array
      title: "Intervention Simple List"
      items:
        $ref: '#/components/schemas/Intervention'
    InterventionList:
      type: array
      title: "Intervention List with Pagination"
      items:
        properties:
          content:
            type: array
            items:
              $ref: '#/components/schemas/Intervention'
          pageable:
            type: object
            properties:
              sort:
                type: object
                properties:
                  sorted:
                    type: boolean
                    example: false
                  empty:
                    type: boolean
                    example: true
                  unsorted:
                    type: boolean
                    example: true
              pageSize:
                type: integer
                example: 20
              pageNumber:
                type: integer
                example: 0
              offset:
                type: integer
                example: 0
              paged:
                type: boolean
                example: true
              unpaged:
                type: boolean
                example: false
          totalPages: 
            type: integer
            example: 1
          totalElements:
            type: integer
            example: 2
          last:
            type: boolean
            example: true
          number: 
            type: integer
            example: 0
          size:
            type: integer
            example: 0
          numberOfElements:
            type: integer
            example: 2
    PredefinedData:
      type: object
      title: "Predfined Data Object"
      properties:
        id:
          type: integer
        question: 
          type: string
        answer:
          type: string
        originalAnswer:
          type: string
        memberOf:
          type: object
          description: "Other predefidened data object"
        systemDefined:
          type: boolean
          example: true
        timecreated:
          type: string
          format: date-time
        lastUpdated:
          type: string
          format: date-time
    SNU:
      type: object
      title: "SNU object"
      properties:
        id:
          type: integer
        name:
          type: string
        code:
          type: string
    SNUQuery:
      type: object
      title: "SNU Query Params"
      properties:
        name:
          type: string
        code:
          type: string
    SNUList:
      type: array
      items:
        $ref: '#/components/schemas/SNU'
    PSNU:
      type: object
      title: "PSNU Object"
      properties:
        id:
          type: integer
        name:
          type: string
        code:
          type: string
        snu:
          $ref: '#/components/schemas/SNU'
    PSNUQuery:
      type: object
      title: "PSNU Query Params"
      properties:
        name:
          type: string
        code:
          type: string
        snuId:
          type: integer
    PSNUSimpleList:
      type: array
      title: "PSNU Simple List"
      items:
        $ref: '#/components/schemas/PSNU'
    CSO:
      type: object
      title: "CSO Object"
      properties:
        id:
          type: integer
        name:
          type: string
        code:
          type: string
        supportedLevels:
          $ref: '#/components/schemas/levelSimpleList'
        supportedPSNU:
          $ref: '#/components/schemas/PSNUSimpleList'
    CSOLists:
      title: "CSO list"
      type: array
      items:
        $ref: '#/components/schemas/CSOLists'
    CSOQquery:
      type: object
      title: "CSO query params"
      properties:
        name:
          type: string
        code:
          type: string
        levelId:
          type: integer
        psnuId:
          type: integer
    Enrollment:
      type: object
      title: "Enrollment Object"
      properties:
          timeEnrolled:
            type: string
            format: date-time
          code:
            type: string
            example: 123
          firstName:
            type: string
          lastName:
            type: string
          phoneNumber:
            type: string
          dateOfBirth:
            type: string
            format: date
          ward:
            $ref: '#/components/schemas/WardObject'
          street:
            type: string
          cso:
            type: string
          referral:
            type: boolean
            example: true
          referralFacility:
            $ref: '#/components/schemas/PredefinedData'
          level:
            $ref: '#/components/schemas/level'
    EnrollmentsListWithPagination:
      type: array
      title: "Enrollment list with pagination"
      items:
        properties:
          content:
            type: array
            items:
              $ref: '#/components/schemas/Enrollment'
          pageable:
            type: object
            properties:
              sort:
                type: object
                properties:
                  sorted:
                    type: boolean
                    example: false
                  empty:
                    type: boolean
                    example: true
                  unsorted:
                    type: boolean
                    example: true
              pageSize:
                type: integer
                example: 20
              pageNumber:
                type: integer
                example: 0
              offset:
                type: integer
                example: 0
              paged:
                type: boolean
                example: true
              unpaged:
                type: boolean
                example: false
          totalPages: 
            type: integer
            example: 1
          totalElements:
            type: integer
            example: 2
          last:
            type: boolean
            example: true
          number: 
            type: integer
            example: 0
          size:
            type: integer
            example: 0
          numberOfElements:
            type: integer
            example: 2
    EnrollmentQuery:
      type: object
      title: "Enrollment Query Params"
      properties:
        dateForm:
          type: string
          format: date-time('dd-MM-yyyy')
          example: '01-12-2021'
        dateTo:
          type: string
          format: date-time('dd-MM-yyyy')
          example: '12-01-2022 '
        street:
          type: string
          example: 'Mtakuja st.'
        wardId:
         type: integer
         example: 11
        firstName:
          type: string
          example: 'Jane'
        lastName:
          type: string
          example: 'Doe'
        creatorId:
         type: integer
         example: 100
    EnrollmentPostOject:
      type: object
      title: "Enrollment Create/Update Object"
      description: "Used during posting"
      required: 
        - recordedTime
        - date
        - code
        - firstName
        - lastName
        - phoneNumber
        - dateOfBirth
        - level
        - ward
        - street
        - cso
      properties:
        recordedTime:
            type: string
            format: date-time
            example: '2021-12-29T10:30:12.396348'
        date:
          type: string
          format: date('yyyy-mm-dd')
          example: '2021-12-30'
        code:
          type: string
          description: 'UIC'
        firstName:
          type: string
        lastName:
          type: string
        phoneNumber:
          type: string
        dateOfBirth:
            type: string
            format: date('yyyy-mm-dd')
            example: '2020-10-02'
        level:
          type: integer
          example: 2
        ward:
          type: integer
          example: 3
        street:
          type: integer
          example: 1
        cso:
          type: integer
          example: 13
        referral:
          type: boolean
          example: false
          description: "If this is true, make sure you provide referral facility"
        referralFacility:
          type: integer
          description: "Can be null if referral is marked false"
    EnrollmentPostOjectList:
      type: array
      title: "Enrollment Create/Update Bulk List"
      items:
        $ref: '#/components/schemas/EnrollmentPostOject'
    EnrollmentList:
      type: array
      items:
        $ref: '#/components/schemas/Enrollment'
    Encounter:
      type: object
      title: "Encounter Object"
      properties:
        enrollment: 
          $ref: '#/components/schemas/Enrollment'
        stage:
          $ref: '#/components/schemas/Stage'
        date:
          type: string
          format: "YYYY-MM-DD"
    EncounterList:
      type: array
      title: "Encounter Simple List"
      items:
        $ref: '#/components/schemas/Encounter'
    EncounterListWithPagination:
      type: array
      title: "Encounter List with Pagination"
      items:
        properties:
          content:
            type: array
            items:
              $ref: '#/components/schemas/Encounter'
          pageable:
            type: object
            properties:
              sort:
                type: object
                properties:
                  sorted:
                    type: boolean
                    example: false
                  empty:
                    type: boolean
                    example: true
                  unsorted:
                    type: boolean
                    example: true
              pageSize:
                type: integer
                example: 20
              pageNumber:
                type: integer
                example: 0
              offset:
                type: integer
                example: 0
              paged:
                type: boolean
                example: true
              unpaged:
                type: boolean
                example: false
          totalPages: 
            type: integer
            example: 1
          totalElements:
            type: integer
            example: 2
          last:
            type: boolean
            example: true
          number: 
            type: integer
            example: 0
          size:
            type: integer
            example: 0
          numberOfElements:
            type: integer
            example: 2
    EncounterPostObject:
      type: object
      title: "Encounter Create Object"
      description: "Used during posting" 
      required: 
        - recordedTime
        - date
        - stage
        - enrollment
      properties:
        recordedTime:
          type: string
          example: "2022-02-17T14:00:18.074211"
        date: 
          type: string
          format: date('yyyy-mm-dd')
          example: '2021-01-12'
        stage:
          type: integer
          example: 11
          description: "Stage ID found inside services"
        enrollment:
          type: string
          description: "Enrollment code UIC"
          example: 1234
    EncounterPostListObject:
      type: array
      title: "Encounter Create List Objects"
      items:
        $ref: '#/components/schemas/EncounterPostObject'
    EncounterQuery:
      type: object
      title: "Encounter Query Params"
      properties:
        dateForm:
          type: string
          format: date('dd-mm-yyyy')
          example: '01-12-2021'
        dateTo:
          type: string
          format: date('dd-mm-yyyy')
          example: '12-02-2022'
        street:
          type: string
          example: 'Mtakuja st.'
        wardId:
         type: integer
         example: 11
        levelId:
         type: integer
         example: 8
        serviceId:
         type: integer
         example: 11
        creatorId:
         type: integer
         example: 100
    CreateQuestionBody:
      type: object
      title: "Query Create/Update Object"
      description: "Used during create and update question"
      required: 
        - code
        - title
        - order
        - active
        - answers
      properties:
        code: 
          type: string
        title:
          type: string
        order: 
          type: integer
        active:
          type: boolean
        answers:
          type: array
          items:
            $ref: '#/components/schemas/AnswerCreateBody'
    QuestionBody:
      type: object
      title: "Question Object"
      properties:
        id:
          type: integer
        code:
          type: string
        title:
          type: string
        answers:
          type: array
          items:
            $ref: '#/components/schemas/AnswerBody'
        activeCriteria:
            type: object
            properties:
              questionId:
                type: string
                example: "answerId"
                description: "This is key:value pair where key is question ID and value is Answer ID"
        order:
          type: integer
        active:
          type: boolean
    AnswerBody:
      type: object
      title: "Answer Object"
      properties:
        id:
          type: integer
        title:
          type: string
        weight:
          type: integer
        order:
          type: integer
    AnswerCreateBody:
      type: object
      title: "Answer Create/Update Object"
      description: "Used during create and update answer"
      required: 
        - title
        - weight
        - order
      properties:
        title:
          type: string
        weight:
          type: integer
        order:
          type: integer
    QuestionList:
      type: array
      items:
        $ref: '#/components/schemas/QuestionBody'
    QuestionListWithPagination:
      type: array
      title: "Question List with Pagination"
      items:
        properties:
          content:
            type: array
            items:
              $ref: '#/components/schemas/QuestionBody'
          pageable:
            type: object
            properties:
              sort:
                type: object
                properties:
                  sorted:
                    type: boolean
                    example: false
                  empty:
                    type: boolean
                    example: true
                  unsorted:
                    type: boolean
                    example: true
              pageSize:
                type: integer
                example: 20
              pageNumber:
                type: integer
                example: 0
              offset:
                type: integer
                example: 0
              paged:
                type: boolean
                example: true
              unpaged:
                type: boolean
                example: false
          totalPages: 
            type: integer
            example: 1
          totalElements:
            type: integer
            example: 2
          last:
            type: boolean
            example: true
          number: 
            type: integer
            example: 0
          size:
            type: integer
            example: 0
          numberOfElements:
            type: integer
            example: 2
    ResponseBody:
      type: object
      properties:
        id:
          type: integer
          example: 17
        mark:
          type: integer
          example: 1
        question:
          $ref: '#/components/schemas/QuestionBody'
        answer:
          $ref: '#/components/schemas/AnswerBody'
    ResponseCreateBody:
      type: object
      title: "Response Create/Update Object"
      description: "Used during create and update response"
      required: 
        - questionId
        - answerId
        - mark
      properties:
        question:
          type: integer
        answer:
          type: integer
        mark:
          type: integer
    ScreenBody:
      title: "Screen Object"
      type: object
      properties:
        id:
          type: integer
          example: 23
        recordedTime:
          type: string
          example: "2022-02-17T14:00:18.074211"
        date:
          type: string
          format: date('yyyy-mm-dd')
        dateOfBirth:
          type: string
          format: date('yyyy-mm-dd')
          example: '2021-12-01'
        cso:
          $ref: '#/components/schemas/CSO'
        ward:
          $ref: '#/components/schemas/WardObject'
        street:
          type: string
        score:
          type: integer
        eligible:
          type: boolean
        agreed:
          type: boolean
        responses:
          type: array
          items:
            $ref: '#/components/schemas/ResponseBody'
        enrollment:
          $ref: '#/components/schemas/Enrollment'
        decliningReason:
          $ref: '#/components/schemas/PredefinedData'
        decliningReasonNotes:
          type: string
    ScreenCreateBody:
      title: "Screan Create/Update Object"
      description: "Used during create and update screen"
      required: 
        - recordedTime
        - date
        - dateOfBirth
        - ward
        - street
        - responses
      type: object
      properties:
        recordedTime:
            type: string
            example: "2022-02-17T14:00:18.074211"
        date:
          type: string
          format: date('yyyy-mm-dd')
        dateOfBirth:
          type: string
          format: date('yyyy-mm-dd')
        cso:
          type: integer
          example: 245
        ward:
          type: integer
          example: 11
        street:
          type: string
          example: Mazinde
        agreed:
          type: boolean
        responses:
          type: array
          items:
            $ref: '#/components/schemas/ResponseCreateBody'
        enrollmentCode:
          type: string
        decliningReason:
          type: integer
        decliningReasonNotes:
          type: string
    ScreenQuery:
      type: object
      description: "You can pass all or some of these"
      title: "Screen Query Params"
      properties:
        dateForm:
          type: string
          format: date('dd-mm-yyyy')
          example: '01-11-2021'
        dateTo:
          type: string
          format: date('dd-mm-yyyy')
          example: '20-12-2021'
        street:
          type: string
          example: 'Mtakuja st.'
        ward:
         type: integer
         example: 11
        eligible:
         type: boolean
         example: true
        agreed:
         type: boolean
         example: true
        enrollmentCode:
          type: string
          example: "A000000"
        decliningReason:
          type: integer
          example: 23
        creatorId:
         type: integer
         example: 100
    ScreenList:
      type: array
      title: "Screen Simple List"
      items:
        $ref: '#/components/schemas/ScreenBody'
    ScreenListWithPages:
      type: array
      title: "Screen List with Pagination"
      items:
        properties:
          content:
            type: array
            items:
              $ref: '#/components/schemas/ScreenBody'
          pageable:
            type: object
            properties:
              sort:
                type: object
                properties:
                  sorted:
                    type: boolean
                    example: false
                  empty:
                    type: boolean
                    example: true
                  unsorted:
                    type: boolean
                    example: true
              pageSize:
                type: integer
                example: 20
              pageNumber:
                type: integer
                example: 0
              offset:
                type: integer
                example: 0
              paged:
                type: boolean
                example: true
              unpaged:
                type: boolean
                example: false
          totalPages: 
            type: integer
            example: 1
          totalElements:
            type: integer
            example: 2
          last:
            type: boolean
            example: true
          number: 
            type: integer
            example: 0
          size:
            type: integer
            example: 0
          numberOfElements:
            type: integer
            example: 2
    WardObject:
      type: object
      title: "Ward Object"
      description: "Ward Object Structure"
      properties:
        id:
          type: integer
          example: 574
        name:
          type: string
          example: "Ubaruku"
        code:
          type: string
          example: "W0000"
        psnu:
          $ref: '#/components/schemas/PSNU'
    WardQuery:
      type: object
      title: "Ward Query"
      description: "Ward query parameters"
      properties:
        name:
          type: string
          example: "Baruku"
        code:
          type: string
          example: "W0009"
        psnuId:
          type: integer
          example: 7
    WardList:
      type: array
      title: "Ward list"
      description: "Ward list structure"
      items:
        $ref: '#/components/schemas/WardObject'
    PeriodObject:
      type: object
      title: "Period Object"
      description: "Object representing period structure"
      properties:
        id:
          type: integer
          example: 574
        startDate:
          type: string
          example: "2021-10-01"
        endDate:
          type: string
          example: "2021-12-31"
        closed:
          type: boolean
          example: false
        timeCreated:
          type: string
          example: "2022-02-16T17:34:50.682676" 
        lastUpdated:
          type: string
          example: "2022-02-16T17:34:50.682602" 
    PeriodQuery:
      type: object
      title: "Period Query"
      description: "Query structure for period"
      properties:
        name:
          type: string
          example: "FY22Q1"
        startDateFrom:
          type: string
          example: "2022-02-16"
        startDateTo:
          type: string
          example: "2022-02-16"
        endDateFrom:
          type: string
          example: "2022-02-17"
        endDateTo:
          type: string
          example: "2022-02-19"
        closed:
          type: boolean
          example: false
    ListPeriods:
      type: array
      title: "List of periods"
      description: "Period list structure"
      items:
        $ref: '#/components/schemas/PeriodObject'