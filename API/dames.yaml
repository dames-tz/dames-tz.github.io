openapi: 3.0.0
info:
  title: Dames API
  description: Dames Api for Dreams project. Help to connect/send data to Dames Dashboard
  contact:
    name: Niafikra Group LTD
    url: http://niafikra.com/
    email: support@niafikra.com
  version: 1.0.0
servers: 
  - url: http://localhost:8080/api/v1/dames
  - url: https://dames.co.tz/api/v1/dames
paths:
  /screening:
    description: Create Screening 
    post:
      description: Post Screening.
      security: 
         - basicAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScreenCreateBody'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScreenBody'
                
  /screening/list:
    description: Fetch all screening
    get:
      description: Fetch all screening
      security: 
         - basicAuth: []
      parameters: 
        - in: query
          description: "Date from where screen done"
          name: dateFrom
          schema:
            type: string
            format: "dd-mm-yyyy"
        - in: query
          description: "Date to where screen done"
          name: dateTo
          schema:
            type: string
            format: "dd-mm-yyyy" 
        - in: query
          description: "Candidate Date of birth start range"
          name: dateOfBirthFrom
          schema:
            type: string
            format: "dd-mm-yyyy" 
        - in: query
          description: "Candidate Date of birth end range"
          name: dateOfBirthTo
          schema:
            type: string
            format: "dd-mm-yyyy" 
        - in: query
          description: "Pull all candidates who eligible or not"
          name: eligible
          schema:
            type: boolean
        - in: query
          description: "Pull all candidates under ward"
          name: wardId
          schema:
            type: integer
        - in: query
          description: "Pull candidate with enrollment code"
          name: enrollmentCode
          schema:
            type: string
        - in: query
          description: "Pull all candidates under cso"
          name: csoId
          schema:
            type: integer
        - in: query
          description: "Pull all candidates under psnu"
          name: psnuId
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScreenList'
                
  /screening/page:
    description: Fetch all screening in oages
    get:
      description: Fetch all screening in pages
      security: 
         - basicAuth: []
      parameters: 
        - in: query
          description: "Date from where screen done"
          name: dateFrom
          schema:
            type: string
            format: "dd-mm-yyyy"
        - in: query
          description: "Date to where screen done"
          name: dateTo
          schema:
            type: string
            format: "dd-mm-yyyy" 
        - in: query
          description: "Candidate Date of birth start range"
          name: dateOfBirthFrom
          schema:
            type: string
            format: "dd-mm-yyyy" 
        - in: query
          description: "Candidate Date of birth end range"
          name: dateOfBirthTo
          schema:
            type: string
            format: "dd-mm-yyyy" 
        - in: query
          description: "Pull all candidates who eligible or not"
          name: eligible
          schema:
            type: boolean
        - in: query
          description: "Pull all candidates under ward"
          name: wardId
          schema:
            type: integer
        - in: query
          description: "Pull candidate with enrollment code"
          name: enrollmentCode
          schema:
            type: string
        - in: query
          description: "Pull all candidates under cso"
          name: csoId
          schema:
            type: integer
        - in: query
          description: "Pull all candidates under psnu"
          name: psnuId
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScreenListWithPages'
                
  /screening/{id}/:
    description: Update Screening 
    put:
      description: Update Screening
      security: 
         - basicAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScreenCreateBody'
      parameters: 
        - in: path
          description: Pass Screen Id.
          name: id
          required: true
          example: 7
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScreenBody'
                
  /screening/{id}:
    description: Delete Screening
    delete:
      description: Delete Not Enrolled Screening
      security: 
         - basicAuth: []
      parameters:
        - in: path
          description: Pass Screening Id.
          name: id
          required: true
          example: 23
          schema:
            type: integer
      responses:
        202:
          description: OK
  
  /screening/count:
    description: Count screens from query
    get:
      description: Count screens from query 
      security: 
         - basicAuth: []
      parameters: 
        - in: query
          description: "Date from where screen done"
          name: dateFrom
          schema:
            type: string
            format: "dd-mm-yyyy"
        - in: query
          description: "Date to where screen done"
          name: dateTo
          schema:
            type: string
            format: "dd-mm-yyyy" 
        - in: query
          description: "Candidate Date of birth start range"
          name: dateOfBirthFrom
          schema:
            type: string
            format: "dd-mm-yyyy" 
        - in: query
          description: "Candidate Date of birth end range"
          name: dateOfBirthTo
          schema:
            type: string
            format: "dd-mm-yyyy" 
        - in: query
          description: "Pull all candidates who eligible or not"
          name: eligible
          schema:
            type: boolean
        - in: query
          description: "Pull all candidates under ward"
          name: wardId
          schema:
            type: integer
        - in: query
          description: "Pull candidate with enrollment code"
          name: enrollmentCode
          schema:
            type: string
        - in: query
          description: "Pull all candidates under cso"
          name: csoId
          schema:
            type: integer
        - in: query
          description: "Pull all candidates under psnu"
          name: psnuId
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
             application/text:
              schema:
                type: integer
                example: 100
  /need:
    description: Create Need 
    post:
      description: Post Need.
      security: 
         - basicAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NeedCreate'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Need'
  /need/bulk:
    description: Create Need in bulk
    post:
      description: Post Need in bulk.
      security: 
         - basicAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NeedCreateList' 
      responses:
          200:
            description: OK
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/NeedList'
  /need/list:
    description: Fetch all needs
    get:
      description: Fetch all needs
      security: 
         - basicAuth: []
      parameters: 
        - in: query
          description: "Date from where need recognised"
          name: dateFrom
          schema:
            type: string
            format: "dd-mm-yyyy"
        - in: query
          description: "Date to where need recognised"
          name: dateTo
          schema:
            type: string
            format: "dd-mm-yyyy"
        - in: query
          description: "Enrollment code with need"
          name: enrollmentCode
          schema:
            type: string
        - in: query
          description: "Needs with service"
          name: serviceId
          schema:
            type: integer
        - in: query
          description: "Needs which are resolved or not"
          name: resolved
          schema:
            type: boolean
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NeedList'
                
  /need/page:
    description: Fetch all needs in oages
    get:
      description: Fetch all needs in pages
      security: 
         - basicAuth: []
      parameters: 
        - in: query
          description: "Date from where need recognised"
          name: dateFrom
          schema:
            type: string
            format: "dd-mm-yyyy"
        - in: query
          description: "Date to where need recognised"
          name: dateTo
          schema:
            type: string
            format: "dd-mm-yyyy"
        - in: query
          description: "Enrollment code with need"
          name: enrollmentCode
          schema:
            type: string
        - in: query
          description: "Needs with service"
          name: serviceId
          schema:
            type: integer
        - in: query
          description: "Needs which are resolved or not"
          name: resolved
          schema:
            type: boolean
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NeedListWithPages'
  /need/{id}:
    description: Get Need
    get:
      description: Get Need by ID
      security: 
         - basicAuth: []
      parameters: 
        - in: path
          description: Pass Need ID.
          name: id
          required: true
          example: 0
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Need'
                
  /need/{id}/:
    description: Delete Need
    delete:
      description: Delete Need
      security: 
         - basicAuth: []
      parameters:
        - in: path
          description: Pass Need Id.
          name: id
          required: true
          example: 23
          schema:
            type: integer
      responses:
        202:
          description: OK           
  /cso/{id}:
    description: Get CSO
    get:
      description: Get CSO by ID
      security: 
         - basicAuth: []
      parameters: 
        - in: path
          description: Pass CSO ID.
          name: id
          required: true
          example: 0
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CSO'
                
  /cso/code/{code}:
    description: Get CSO
    get:
      description: Get CSO by CODE
      security: 
         - basicAuth: []
      parameters: 
        - in: path
          description: Pass CSO CODE.
          name: code
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CSO'
          
  /cso/list:
    description: List all CSO
    get:
      description: List all CSO
      security: 
         - basicAuth: []
      parameters: 
        - in: query
          description: "CSO identity code"
          name: "code"
          schema:
            type: string
          required: false
        - in: query
          description: "CSO name"
          name: "name"
          schema:
            type: string
          required: false
        - in: query
          description: "Supported Level ID (All CSOs supported by level)"
          name: "levelId"
          schema:
            type: string
          required: false
        - in: query
          description: "PSNU ID. (All CSOs in PSNU)"
          name: "psnuId"
          schema:
            type: string
          required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CSOLists'
                
  /level/list:
    description: List all levels
    get:
      description: List all levels
      security: 
         - basicAuth: []
      parameters: 
        - in: query
          description: "Age from, start point"
          name: "startAgeFrom"
          schema:
            type: integer
            example: 1
          required: false
        - in: query
          description: "Age from, end point"
          name: "startAgeTo"
          schema:
            type: integer
            example: 9
          required: false
        - in: query
          description: "End Age from, start point"
          name: "endAgeFrom"
          schema:
            type: integer
            example: 10
          required: false
        - in: query
          description: "End Age to, end point"
          name: "endAgeTo"
          schema:
            type: integer
            example: 15
          required: false
        - in: query
          description: "Level name"
          name: "name"
          schema:
            type: string
          required: false
        - in: query
          description: "Supported Category ID (All levels under category)"
          name: "categoryId"
          schema:
            type: string
          required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/levelSimpleList'
                
  /level/{id}:
    description: Get level
    get:
      description: Get level by ID
      security: 
         - basicAuth: []
      parameters: 
        - in: path
          description: Pass Level ID.
          name: id
          required: true
          example: 0
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/level'
                
  /level/name/{name}:
    description: Get level
    get:
      description: Get level by Name
      security: 
         - basicAuth: []
      parameters: 
        - in: path
          description: Pass Level Name.
          name: name
          required: true
          example: 0
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/level'
                
  /ward/list:
    description: List all wards
    get:
      description: List all wards
      security: 
         - basicAuth: []
      parameters: 
        - in: query
          description: "Name of ward"
          name: name
          schema:
            type: string
          required: false
        - in: query
          description: "Code of ward"
          name: code
          schema:
            type: string
          required: false
        - in: query
          description: "PSNU ID where wards belong"
          name: psnuId
          schema:
            type: integer
          required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WardList'
                
  /ward/{id}:
    description: Get level
    get:
      description: Get ward by ID
      security: 
         - basicAuth: []
      parameters: 
        - in: path
          description: Pass ward ID.
          name: id
          required: true
          example: 0
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WardObject'
  
  /ward/code/{code}:
    description: Get level
    get:
      description: Get ward by Code
      security: 
         - basicAuth: []
      parameters: 
        - in: path
          description: Pass ward Code.
          name: code
          required: true
          example: 0
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WardObject'

  /period/list:
    description: List all periods
    get:
      description: List all periods
      security: 
         - basicAuth: []
      parameters: 
        - in: query
          description: "Period start date, start point"
          name: startDateFrom
          schema:
            type: string
            format: date("dd-mm-yyyy")
          required: false
        - in: query
          description: "Period start date, end point"
          name: startDateTo
          schema:
            type: string
            format: date("dd-mm-yyyy")
          required: false
        - in: query
          description: "Period end date, start point"
          name: endDateFrom
          schema:
            type: string
            format: date("dd-mm-yyyy")
          required: false
        - in: query
          description: "Period end date, end point"
          name: endDateTo
          schema:
            type: string
            format: date("dd-mm-yyyy")
          required: false
        - in: query
          description: "Period name"
          name: name
          schema:
            type: string
            example: "FY22Q1"
          required: false
        - in: query
          description: "Is period closed/ fetch all period based on is closed flag"
          name: closed
          schema:
            type: boolean
            example: false
          required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListPeriods'
  /period/{id}:
    description: Get period
    get:
      description: Get period ID
      security: 
         - basicAuth: []
      parameters: 
        - in: path
          description: Pass period ID.
          name: id
          required: true
          example: 574
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PeriodObject'
  /service/list:
    description: List Services
    get:
      description: Find services 
      security: 
         - basicAuth: []
      parameters: 
        - in: query
          description: "Period start date, start point"
          name: startDateFrom
          schema:
            type: string
            format: date("dd-mm-yyyy")
          required: false
        - in: query
          description: "Period start date, end point"
          name: startDateTo
          schema:
            type: string
            format: date("dd-mm-yyyy")
          required: false
        - in: query
          description: "Period end date, start point"
          name: endDateFrom
          schema:
            type: string
            format: date("dd-mm-yyyy")
          required: false
        - in: query
          description: "Period end date, end point"
          name: endDateTo
          schema:
            type: string
            format: date("dd-mm-yyyy")
          required: false
        - in: query
          description: "Period name"
          name: name
          schema:
            type: string
            example: "FY22Q1"
          required: false
        - in: query
          description: "Is period closed/ fetch all period based on is closed flag"
          name: closed
          schema:
            type: boolean
            example: false
          required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceSimpleList'
  /service/{id}:
    description: Get Service by ID
    get:
      description: Pass Service Id to fetch Service Object
      security:
        - basicAuth: []
      parameters: 
        - in: path
          description: Pass service id.
          name: id
          required: true
          example: 5
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
  /service/stage/{code}:
    description: Get Service Stage by Code
    get:
      description: Pass Service Stage Code to fetch Stage Object
      security:
        - basicAuth: []
      parameters: 
        - in: path
          description: Pass service stage code.
          name: code
          required: true
          example: "1234"
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Stage'
  /intervention/list:
    description: List Interventions
    get:
      description: List services 
      security: 
         - basicAuth: []
      parameters: 
        - in: query
          description: "All interventions under Category Id"
          name: categoryId
          schema:
            type: integer
            example: 2
          required: false
        - in: query
          description: "All interventions under Level Id"
          name: levelId
          schema:
            type: integer
            example: 0
          required: false
        - in: query
          description: "All interventions has Service Id"
          name: serviceId
          schema:
            type: integer
          required: false
        - in: query
          description: "All interventions is/not mandatory"
          name: mandatory
          schema:
            type: boolean
            example: true
          required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InterventionSimpleList'
  /intervention/page:
    description: List Intervention in page
    get:
      description: List Intervention in pages
      security: 
         - basicAuth: []
      parameters: 
        - in: query
          description: "All interventions under Category Id"
          name: categoryId
          schema:
            type: integer
            example: 2
          required: false
        - in: query
          description: "All interventions under Level Id"
          name: levelId
          schema:
            type: integer
            example: 0
          required: false
        - in: query
          description: "All interventions has Service Id"
          name: serviceId
          schema:
            type: integer
          required: false
        - in: query
          description: "All interventions is/not mandatory"
          name: mandatory
          schema:
            type: boolean
            example: true
          required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InterventionList'
  /intervention/{id}:
    description: Get Intervention by ID
    get:
      description: Pass Intervention Id to fetch Intervention Object
      security:
        - basicAuth: []
      parameters: 
        - in: path
          description: Pass Intervention id.
          name: id
          required: true
          example: 5
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Intervention'
  /enrollment:
    description: Create or Update Enrollment
    post:
      description: "Create or Update Enrollment, For new code will create but for existing one will update. So the main identifying component is Code"
      security: 
         - basicAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EnrollmentPostOject'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
               $ref: '#/components/schemas/Enrollment'
  /enrollment/{code}/exist:
    description: Check if code exists
    get:
      description: Check if enrollment code exists
      security: 
         - basicAuth: []
      parameters: 
        - in: path
          description: Pass new generated enrollment code 
          name: code
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            text/plain:
              schema:
                type: boolean
                example: true
  /enrollment/{code}:
    description: Get Enrollment
    get:
      description: Get enrollment by code
      security: 
         - basicAuth: []
      parameters: 
        - in: path
          description: Pass enrollment code
          name: code
          required: true
          schema:
            type: string
          example: 123
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Enrollment'
                
  /enrollment/bulk:
    description: Post bulk enrollment.
    post:
      description: Post bulk enrollment. Posting multiple enrollment objects at once
      security: 
         - basicAuth: []
      requestBody:
        content:
          application/json:
                schema:
                  $ref: '#/components/schemas/EnrollmentPostOjectList'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnrollmentList'
                
  /enrollment/list:
    description: Find all enrollments
    get:
      description: Find all posted enrollments
      security: 
         - basicAuth: []
      parameters: 
        - in: query
          description: "Enrollment Code"
          name: code
          schema:
            type: string
        - in: query
          description: "Referral Enrollments"
          name: referral
          schema:
            type: boolean
        - in: query
          description: "Enrollment Date from"
          name: dateFrom
          schema:
            type: string
            format: "dd-mm-yyyy"
        - in: query
          description: "Enrollment Date to"
          name: dateTo
          schema:
            type: string
            format: "dd-mm-yyyy"  
        - in: query
          description: "Enrollment Wards IDs"
          name: wardIds
          schema:
           type: array
           items:
            type: integer
        - in: query
          description: "Enrollment CSOs IDs"
          name: csoIds
          schema:
           type: array
           items:
            type: integer
        - in: query
          description: "Enrollment Levels IDs"
          name: levelIds
          schema:
           type: array
           items:
            type: integer
        - in: query
          description: "Enrollment Graduation Date from"
          name: graduationFrom
          schema:
            type: string
            format: "dd-mm-yyyy"
        - in: query
          description: "Enrollment Graduation Date to"
          name: graduationTo
          schema:
            type: string
            format: "dd-mm-yyyy" 
        - in: query
          description: "Enrollment Service Completion Date from"
          name: completedFrom
          schema:
            type: string
            format: "dd-mm-yyyy"
        - in: query
          description: "Enrollment Service Completion Date to"
          name: completedTo
          schema:
            type: string
            format: "dd-mm-yyyy" 
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnrollmentList'
                
  /enrollment/page:
    description: List all enrollments in Pages
    get:
      description: List all enrollments in Pages
      security: 
         - basicAuth: []
      parameters: 
        - in: query
          description: "Enrollment Code"
          name: code
          schema:
            type: string
        - in: query
          description: "Referral Enrollments"
          name: referral
          schema:
            type: boolean
        - in: query
          description: "Enrollment Date from"
          name: dateFrom
          schema:
            type: string
            format: "dd-mm-yyyy"
        - in: query
          description: "Enrollment Date to"
          name: dateTo
          schema:
            type: string
            format: "dd-mm-yyyy"  
        - in: query
          description: "Enrollment Wards IDs"
          name: wardIds
          schema:
           type: array
           items:
            type: integer
        - in: query
          description: "Enrollment CSOs IDs"
          name: csoIds
          schema:
           type: array
           items:
            type: integer
        - in: query
          description: "Enrollment Levels IDs"
          name: levelIds
          schema:
           type: array
           items:
            type: integer
        - in: query
          description: "Enrollment Graduation Date from"
          name: graduationFrom
          schema:
            type: string
            format: "dd-mm-yyyy"
        - in: query
          description: "Enrollment Graduation Date to"
          name: graduationTo
          schema:
            type: string
            format: "dd-mm-yyyy" 
        - in: query
          description: "Enrollment Service Completion Date from"
          name: completedFrom
          schema:
            type: string
            format: "dd-mm-yyyy"
        - in: query
          description: "Enrollment Service Completion Date to"
          name: completedTo
          schema:
            type: string
            format: "dd-mm-yyyy"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnrollmentsListWithPagination'
                
  /enrollment/count:
    description: Count enrollments from query
    get:
      description: Count enrollments by query 
      security: 
         - basicAuth: []
      parameters: 
        - in: query
          description: "Enrollment Code"
          name: code
          schema:
            type: string
        - in: query
          description: "Referral Enrollments"
          name: referral
          schema:
            type: boolean
        - in: query
          description: "Enrollment Date from"
          name: dateFrom
          schema:
            type: string
            format: "dd-mm-yyyy"
        - in: query
          description: "Enrollment Date to"
          name: dateTo
          schema:
            type: string
            format: "dd-mm-yyyy"  
        - in: query
          description: "Enrollment Wards IDs"
          name: wardIds
          schema:
           type: array
           items:
            type: integer
        - in: query
          description: "Enrollment CSOs IDs"
          name: csoIds
          schema:
           type: array
           items:
            type: integer
        - in: query
          description: "Enrollment Levels IDs"
          name: levelIds
          schema:
           type: array
           items:
            type: integer
        - in: query
          description: "Enrollment Graduation Date from"
          name: graduationFrom
          schema:
            type: string
            format: "dd-mm-yyyy"
        - in: query
          description: "Enrollment Graduation Date to"
          name: graduationTo
          schema:
            type: string
            format: "dd-mm-yyyy" 
        - in: query
          description: "Enrollment Service Completion Date from"
          name: completedFrom
          schema:
            type: string
            format: "dd-mm-yyyy"
        - in: query
          description: "Enrollment Service Completion Date to"
          name: completedTo
          schema:
            type: string
            format: "dd-mm-yyyy"
      responses:
        200:
          description: OK
          content:
             application/text:
              schema:
                type: integer
                example: 10
                
  /encounter:
    description: Create Encounter
    post:
      description: Create Encounter 
      security: 
         - basicAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EncounterPostObject'
      responses:
        201:
          description: CREATED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Encounter'
  /encounter/bulk:
    description: Create Encounter in bulk
    post:
      description: Create Encounter in bulk 
      security: 
         - basicAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EncounterPostListObject'
      responses:
        201:
          description: CREATED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncounterList'
  /encounter/list:
    description: Find all encounters
    get:
      description: Find all posted encounters by logged user
      security: 
         - basicAuth: []
      parameters: 
        - in: query
          description: "Encounters of Date from"
          name: dateFrom
          schema:
            type: string
            format: "dd-mm-yyyy"
        - in: query
          description: "Encounters of Date to"
          name: dateTo
          schema:
            type: string
            format: "dd-mm-yyyy"  
        - in: query
          description: "Encounters of Enrollment code"
          name: enrollmentCode
          schema:
            type: string
        - in: query
          description: "Encounters of Ward"
          name: wardId
          schema:
            type: integer
        - in: query
          description: "Encounters of Period"
          name: periodId
          schema:
            type: integer 
        - in: query
          description: "Encounters within service stage"
          name: stageId
          schema:
            type: integer 
        - in: query
          description: "Encounters within service"
          name: serviceId
          schema:
            type: integer
        - in: query
          description: "CSO id, CSO who register it"
          name: csoId
          schema:
            type: integer
        - in: query
          description: "Partner id, All encounters under partner"
          name: partnerId
          schema:
            type: integer 
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncounterList'
  /encounter/count:
    description: Count encounters from query
    get:
      description: Count submitted encounters by login user
      security: 
         - basicAuth: []
      parameters: 
        - in: query
          description: "Encounters of Date from"
          name: dateFrom
          schema:
            type: string
            format: "dd-mm-yyyy"
        - in: query
          description: "Encounters of Date to"
          name: dateTo
          schema:
            type: string
            format: "dd-mm-yyyy"  
        - in: query
          description: "Encounters of Enrollment code"
          name: enrollmentCode
          schema:
            type: string
        - in: query
          description: "Encounters of Ward"
          name: wardId
          schema:
            type: integer
        - in: query
          description: "Encounters of Period"
          name: periodId
          schema:
            type: integer 
        - in: query
          description: "Encounters within service stage"
          name: stageId
          schema:
            type: integer 
        - in: query
          description: "Encounters within service"
          name: serviceId
          schema:
            type: integer
        - in: query
          description: "CSO id, CSO who register it"
          name: csoId
          schema:
            type: integer
        - in: query
          description: "Partner id, All encounters under partner"
          name: partnerId
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
             application/text:
              schema:
                type: integer
                example: 10
  /encounter/page:
    description: Find all encounters in page
    get:
      description: List in pages Encounters
      security: 
         - basicAuth: []
      parameters: 
        - in: query
          description: "Encounters of Date from"
          name: dateFrom
          schema:
            type: string
            format: "dd-mm-yyyy"
        - in: query
          description: "Encounters of Date to"
          name: dateTo
          schema:
            type: string
            format: "dd-mm-yyyy"  
        - in: query
          description: "Encounters of Enrollment code"
          name: enrollmentCode
          schema:
            type: string
        - in: query
          description: "Encounters of Ward"
          name: wardId
          schema:
            type: integer
        - in: query
          description: "Encounters of Period"
          name: periodId
          schema:
            type: integer 
        - in: query
          description: "Encounters within service stage"
          name: stageId
          schema:
            type: integer 
        - in: query
          description: "Encounters within service"
          name: serviceId
          schema:
            type: integer
        - in: query
          description: "CSO id, CSO who register it"
          name: csoId
          schema:
            type: integer
        - in: query
          description: "Partner id, All encounters under partner"
          name: partnerId
          schema:
            type: integer 
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncounterListWithPagination'
  /encounter/{id}:
    description: Delete Encounter
    delete:
      description: Delete Encounter
      security: 
         - basicAuth: []
      parameters: 
        - in: path
          description: Pass Encounter id
          name: id
          required: true
          schema:
            type: integer
          example: 100
      responses:
        202:
          description: OK
  /encounter/:
    description: Delete Encounters
    delete:
      description: Delete Encounters based on query passed
      security: 
         - basicAuth: []
      parameters: 
        - in: query
          description: "Encounters of Date from"
          name: dateFrom
          schema:
            type: string
            format: "dd-mm-yyyy"
        - in: query
          description: "Encounters of Date to"
          name: dateTo
          schema:
            type: string
            format: "dd-mm-yyyy"  
        - in: query
          description: "Encounters of Enrollment code"
          name: enrollmentCode
          schema:
            type: string
        - in: query
          description: "Encounters of Ward"
          name: wardId
          schema:
            type: integer
        - in: query
          description: "Encounters of Period"
          name: periodId
          schema:
            type: integer 
        - in: query
          description: "Encounters within service stage"
          name: stageId
          schema:
            type: integer 
        - in: query
          description: "Encounters within service"
          name: serviceId
          schema:
            type: integer
        - in: query
          description: "CSO id, CSO who register it"
          name: csoId
          schema:
            type: integer
        - in: query
          description: "Partner id, All encounters under partner"
          name: partnerId
          schema:
            type: integer  
      responses:
        202:
          description: OK
  /snu/list:
    description: List SNU
    get:
      description: Find all SNU 
      security: 
         - basicAuth: []
      parameters: 
        - in: query
          description: "Query format can be. ?name=Mbeya&code=S12"
          name: query
          schema:
            $ref: '#/components/schemas/SNUQuery'
          required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SNUList'
                
  /snu/{id}:
    description: Get SNU by ID
    get:
      description: Pass SNU Id to fetch SNU Object
      security:
        - basicAuth: []
      parameters: 
        - in: path
          description: Pass snu id.
          name: id
          required: true
          example: 5
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SNU'
                
  /snu/code/{code}:
    description: Get SNU by CODE
    get:
      description: Pass SNU CODE to fetch SNU Object
      security:
        - basicAuth: []
      parameters: 
        - in: path
          description: Pass snu Code.
          name: code
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SNU'
                
  /psnu/list:
    description: List PSNU
    get:
      description: Find all PSNU 
      security: 
         - basicAuth: []
      parameters: 
        - in: query
          description: "Name of PSNU"
          name: name
          schema:
            type: string
            example: Kyela
        - in: query
          description: "PSNU Code"
          name: code
          schema:
            type: string
            example: KYELA
        - in: query
          description: "SNU where PSNU belongs"
          name: snuId
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PSNUSimpleList'
                
  /psnu/{id}:
    description: Get PSNU by ID
    get:
      description: Pass PSNU Id to fetch PSNU Object
      security:
        - basicAuth: []
      parameters: 
        - in: path
          description: Pass PSNU id.
          name: id
          required: true
          example: 0
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PSNU'
  
  /psnu/code/{code}:
    description: Get PSNU by CODE
    get:
      description: Pass PSNU CODE to fetch PSNU Object
      security:
        - basicAuth: []
      parameters: 
        - in: path
          description: Pass PSNU code.
          name: code
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PSNU' 
  /target/list:
    description: Fetch all targets
    get:
      description: Fetch all targets
      security: 
         - basicAuth: []
      parameters: 
        - in: query
          description: "Target type if is ENROLLMENT or PRIMARY_COMPLETION"
          name: type
          schema:
            type: string
            example: "PRIMARY_COMPLETION"
        - in: query
          description: "Target of period"
          name: periodId
          schema:
            type: integer
        - in: query
          description: "Targets under psnu"
          name: psnuId
          schema:
            type: integer
        - in: query
          description: "Targets under level"
          name: levelId
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TargetList'
                
  /target/page:
    description: Fetch all needs in oages
    get:
      description: Fetch all needs in pages
      security: 
         - basicAuth: []
      parameters: 
        - in: query
          description: "Target type if is ENROLLMENT or PRIMARY_COMPLETION"
          name: type
          schema:
            type: string
            example: "PRIMARY_COMPLETION"
        - in: query
          description: "Target of period"
          name: periodId
          schema:
            type: integer
        - in: query
          description: "Targets under psnu"
          name: psnuId
          schema:
            type: integer
        - in: query
          description: "Targets under level"
          name: levelId
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TargetListWithPages'
  /target/{id}:
    description: Get Target
    get:
      description: Get Target by ID
      security: 
         - basicAuth: []
      parameters: 
        - in: path
          description: Pass Target ID.
          name: id
          required: true
          example: 0
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Target'
  /partner:
    description: Create partner 
    post:
      description: Post partner.
      security: 
         - basicAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PartnerCreate'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Partner'
                
  /partner/list:
    description: Fetch all partners
    get:
      description: Fetch all partners
      security: 
         - basicAuth: []
      parameters: 
        - in: query
          description: "Partner name"
          name: name
          schema:
            type: string
            example: HJf
        - in: query
          description: "Partner code"
          name: code
          schema:
            type: string
            example: P1
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PartnerList'
                
  /partner/page:
    description: Fetch all partners in pages
    get:
      description: Fetch all partners in pages
      security: 
         - basicAuth: []
      parameters: 
        - in: query
          description: "Partner name"
          name: name
          schema:
            type: string
            example: HJf
        - in: query
          description: "Partner code"
          name: code
          schema:
            type: string
            example: P1
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PartnerListWithPages'
  /partner/{id}:
    description: Get Partner
    get:
      description: Get Partner by ID
      security: 
         - basicAuth: []
      parameters: 
        - in: path
          description: Pass Partner ID.
          name: id
          required: true
          example: 0
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Partner'
  
  /partner/{partnerId}/{csoId}:
    description: Add Partner CSO
    get:
      description: Add Partner CSO
      security: 
         - basicAuth: []
      parameters: 
        - in: path
          description: Pass Partner ID.
          name: partnerId
          required: true
          example: 0
          schema:
            type: integer
        - in: path
          description: Pass CSO ID.
          name: csoId
          required: true
          example: 0
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Partner'
                
  /partner/{id}/:
    description: Delete partner
    delete:
      description: Delete partner
      security: 
         - basicAuth: []
      parameters:
        - in: path
          description: Pass partner Id.
          name: id
          required: true
          example: 23
          schema:
            type: integer
      responses:
        202:
          description: OK   
components:
  securitySchemes:
    basicAuth:    
      type: http
      scheme: basic
  schemas:
    level:
        type: object
        properties:
          id:
            type: integer
          name: 
            type: string
            example: 10-20
          ageForm:
            type: integer
            example: 10
          ageTo:
            type: integer
            example: 20
          category:
            $ref: '#/components/schemas/Category'
    Category:
      type: object
      title: "Category Object"
      properties:
        id:
          type: integer
          example: 2
        name:
          type: string
          example: "INDIVIDUAL"
    levelQuery:
      type: object
      title: "Level Query Params"
      properties:
        name:
          type: string
        startAgeFrom:
          type: integer
          description: "Fill with startAgeTo"
        startAgeTo:
          type: integer
          description: "Fill with startAgeFrom"
        endAgeFrom:
          type: integer
          description: "Fill with endAgeTo"
        endAgeTo:
          type: integer
          description: "Fill with endAgeFrom"
        categoryId:
         type: integer
    levelSimpleList:
      title: "Level List Object"
      type: array
      items:
        $ref: '#/components/schemas/level'
    Stage:
      type: object
      properties:
        id:
          type: integer
          example: 290
        order:
          type: integer
          example: 1
        name:
          type: string
          example: initial
        code:
          type: string
          example: "1234"
    Service:
      type: object
      properties:
        id: 
          type: integer
          example: 5
        name:
          type: string
        code:
          type: string
        category:
          type: string
          example: First category
        stages:
          type: array
          items:
            properties:
              stage: 
                $ref: '#/components/schemas/Stage'
    ServiceSimpleList:
      type: array
      title: "Service Simple List Object"
      items:
        properties:
          name: 
            type: string
          category:
            type: string
          stages:
            $ref: '#/components/schemas/Stage'
    ServiceQuery:
      type: object
      properties:
        name: 
          type: string
        code:
          type: string
    Intervention:
      type: object
      title: "Intervention Object"
      properties:
        level:
          $ref: '#/components/schemas/level'
        category:
          $ref: '#/components/schemas/Category'
        service:
          $ref: '#/components/schemas/Service'
        mandatory:
          type: boolean
          example: true
    InterventionQuery:
      type: object
      title: "Intervention Query Params"
      properties:
        categoryId:
          type: integer
        levelId:
          type: integer
        serviceId:
          type: integer
        mandatory:
          type: boolean
          example: false
    InterventionSimpleList:
      type: array
      title: "Intervention Simple List"
      items:
        $ref: '#/components/schemas/Intervention'
    InterventionList:
      type: array
      title: "Intervention List with Pagination"
      items:
        properties:
          content:
            type: array
            items:
              $ref: '#/components/schemas/Intervention'
          pageable:
            type: object
            properties:
              sort:
                type: object
                properties:
                  sorted:
                    type: boolean
                    example: false
                  empty:
                    type: boolean
                    example: true
                  unsorted:
                    type: boolean
                    example: true
              pageSize:
                type: integer
                example: 20
              pageNumber:
                type: integer
                example: 0
              offset:
                type: integer
                example: 0
              paged:
                type: boolean
                example: true
              unpaged:
                type: boolean
                example: false
          totalPages: 
            type: integer
            example: 1
          totalElements:
            type: integer
            example: 2
          last:
            type: boolean
            example: true
          number: 
            type: integer
            example: 0
          size:
            type: integer
            example: 0
          numberOfElements:
            type: integer
            example: 2
    SNU:
      type: object
      title: "SNU object"
      properties:
        id:
          type: integer
        name:
          type: string
        code:
          type: string
    SNUQuery:
      type: object
      title: "SNU Query Params"
      properties:
        name:
          type: string
        code:
          type: string
    SNUList:
      type: array
      items:
        $ref: '#/components/schemas/SNU'
    PSNU:
      type: object
      title: "PSNU Object"
      properties:
        id:
          type: integer
        name:
          type: string
        code:
          type: string
        snu:
          $ref: '#/components/schemas/SNU'
    PSNUQuery:
      type: object
      title: "PSNU Query Params"
      properties:
        name:
          type: string
        code:
          type: string
        snuId:
          type: integer
    PSNUSimpleList:
      type: array
      title: "PSNU Simple List"
      items:
        $ref: '#/components/schemas/PSNU'
    CSO:
      type: object
      title: "CSO Object"
      properties:
        id:
          type: integer
        name:
          type: string
        code:
          type: string
        supportedLevels:
          $ref: '#/components/schemas/levelSimpleList'
        supportedPSNU:
          $ref: '#/components/schemas/PSNUSimpleList'
    CSOLists:
      title: "CSO list"
      type: array
      items:
        $ref: '#/components/schemas/CSOLists'
    CSOQquery:
      type: object
      title: "CSO query params"
      properties:
        name:
          type: string
        code:
          type: string
        levelId:
          type: integer
        psnuId:
          type: integer
    Enrollment:
      type: object
      title: "Enrollment Object"
      properties:
          date:
            type: string
            format: date("yyyy-mm-dd")
          code:
            type: string
            example: 123
          dateOfBirth:
            type: string
            format: date
          ward:
            $ref: '#/components/schemas/WardObject'
          cso:
            $ref: '#/components/schemas/CSO'
          referral:
            type: boolean
            example: true
          referralFacility:
            type: boolean
          level:
            $ref: '#/components/schemas/level'
    EnrollmentsListWithPagination:
      type: array
      title: "Enrollment list with pagination"
      items:
        properties:
          content:
            type: array
            items:
              $ref: '#/components/schemas/Enrollment'
          pageable:
            type: object
            properties:
              sort:
                type: object
                properties:
                  sorted:
                    type: boolean
                    example: false
                  empty:
                    type: boolean
                    example: true
                  unsorted:
                    type: boolean
                    example: true
              pageSize:
                type: integer
                example: 20
              pageNumber:
                type: integer
                example: 0
              offset:
                type: integer
                example: 0
              paged:
                type: boolean
                example: true
              unpaged:
                type: boolean
                example: false
          totalPages: 
            type: integer
            example: 1
          totalElements:
            type: integer
            example: 2
          last:
            type: boolean
            example: true
          number: 
            type: integer
            example: 0
          size:
            type: integer
            example: 0
          numberOfElements:
            type: integer
            example: 2
    EnrollmentQuery:
      type: object
      title: "Enrollment Query Params"
      properties:
        dateForm:
          type: string
          format: date-time('dd-MM-yyyy')
          example: '01-12-2021'
        dateTo:
          type: string
          format: date-time('dd-MM-yyyy')
          example: '12-01-2022 '
        code:
          type: string
          description: 'Enrollment code'
        wardIds:
         type: array
         items:
          type: object
          properties:
            id:
              example: 1
        csoIds:
         type: array
         items:
          type: object
          properties:
            id:
              example: 1
        levelIds:
         type: array
         items:
          type: object
          properties:
            id:
              example: 1
        graduationFrom:
          type: string
          format: date-time('dd-MM-yyyy')
          example: '01-12-2021'
        graduationTo:
          type: string
          format: date-time('dd-MM-yyyy')
          example: '12-01-2022 '
        completedFrom:
          type: string
          format: date-time('dd-MM-yyyy')
          example: '01-12-2021'
        completedTo:
          type: string
          format: date-time('dd-MM-yyyy')
          example: '12-01-2022 '
        
    EnrollmentPostOject:
      type: object
      title: "Enrollment Create/Update Object"
      description: "Used during posting"
      required: 
        - date
        - code
        - dateOfBirth
        - level
        - ward
        - cso
        - period
      properties:
        date:
          type: string
          format: date('yyyy-mm-dd')
          example: '2021-12-30'
        code:
          type: string
          description: 'UIC'
        dateOfBirth:
            type: string
            format: date('yyyy-mm-dd')
            example: '2020-10-02'
        level:
          type: integer
          example: 2
        ward:
          type: integer
          example: 3
        cso:
          type: integer
          example: 13
        referral:
          type: boolean
          example: false
        graduated:
          type: boolean
          example: false
    EnrollmentPostOjectList:
      type: array
      title: "Enrollment Create/Update Bulk List"
      items:
        $ref: '#/components/schemas/EnrollmentPostOject'
    EnrollmentList:
      type: array
      items:
        $ref: '#/components/schemas/Enrollment'
    Encounter:
      type: object
      title: "Encounter Object"
      properties:
        enrollment: 
          $ref: '#/components/schemas/Enrollment'
        stage:
          $ref: '#/components/schemas/Stage'
        date:
          type: string
          format: date("YYYY-MM-DD")
    EncounterList:
      type: array
      title: "Encounter Simple List"
      items:
        $ref: '#/components/schemas/Encounter'
    EncounterListWithPagination:
      type: array
      title: "Encounter List with Pagination"
      items:
        properties:
          content:
            type: array
            items:
              $ref: '#/components/schemas/Encounter'
          pageable:
            type: object
            properties:
              sort:
                type: object
                properties:
                  sorted:
                    type: boolean
                    example: false
                  empty:
                    type: boolean
                    example: true
                  unsorted:
                    type: boolean
                    example: true
              pageSize:
                type: integer
                example: 20
              pageNumber:
                type: integer
                example: 0
              offset:
                type: integer
                example: 0
              paged:
                type: boolean
                example: true
              unpaged:
                type: boolean
                example: false
          totalPages: 
            type: integer
            example: 1
          totalElements:
            type: integer
            example: 2
          last:
            type: boolean
            example: true
          number: 
            type: integer
            example: 0
          size:
            type: integer
            example: 0
          numberOfElements:
            type: integer
            example: 2
    EncounterPostObject:
      type: object
      title: "Encounter Create Object"
      description: "Used during posting" 
      required: 
        - recordedTime
        - date
        - stage
        - enrollment
      properties:
        recordedTime:
          type: string
          example: "2022-02-17T14:00:18.074211"
        date: 
          type: string
          format: date('yyyy-mm-dd')
          example: '2021-01-12'
        stage:
          type: integer
          example: 11
          description: "Stage ID found inside services"
        enrollment:
          type: string
          description: "Enrollment code UIC"
          example: 1234
    EncounterPostListObject:
      type: array
      title: "Encounter Create List Objects"
      items:
        $ref: '#/components/schemas/EncounterPostObject'
    EncounterQuery:
      type: object
      title: "Encounter Query Params"
      properties:
        dateForm:
          type: string
          format: date('dd-mm-yyyy')
          example: '01-12-2021'
        dateTo:
          type: string
          format: date('dd-mm-yyyy')
          example: '12-02-2022'
        enrollmentId:
         type: integer
         example: 11
        wardId:
         type: integer
         example: 11
        periodId:
         type: integer
         example: 8
        stageId:
         type: integer
         example: 11
        serviceId:
         type: integer
         example: 100
    ScreenBody:
      title: "Screen Object"
      type: object
      properties:
        id:
          type: integer
          example: 23
        recordedTime:
          type: string
          example: "2022-02-17T14:00:18.074211"
        date:
          type: string
          format: date('yyyy-mm-dd')
        dateOfBirth:
          type: string
          format: date('yyyy-mm-dd')
          example: '2021-12-01'
        cso:
          $ref: '#/components/schemas/CSO'
        ward:
          $ref: '#/components/schemas/WardObject'
        street:
          type: string
        eligible:
          type: boolean
        agreed:
          type: boolean
        enrollment:
          $ref: '#/components/schemas/Enrollment'
    ScreenCreateBody:
      title: "Screan Create/Update Object"
      description: "Used during create and update screen"
      required: 
        - date
        - dateOfBirth
        - ward
        - cso
        - eligible
        - enrollmentCode
      type: object
      properties:
        date:
          type: string
          format: date('yyyy-mm-dd')
        dateOfBirth:
          type: string
          format: date('yyyy-mm-dd')
        cso:
          type: integer
          example: 245
        ward:
          type: integer
          example: 11
        eligible:
          type: boolean
        enrollmentCode:
          type: string
    ScreenQuery:
      type: object
      description: "You can pass all or some of these"
      title: "Screen Query Params"
      properties:
        dateForm:
          type: string
          format: date('dd-mm-yyyy')
          example: '01-11-2021'
        dateTo:
          type: string
          format: date('dd-mm-yyyy')
          example: '20-12-2021'
        dateOfBirthFrom:
          type: string
          format: date('dd-mm-yyyy')
          example: '01-11-2021'
        dateOfBirthTo:
          type: string
          format: date('dd-mm-yyyy')
          example: '20-12-2021'
        wardId:
         type: integer
         example: 11
        eligible:
         type: boolean
         example: true
        enrollmentId:
          type: integer
          example: 11
        csoId:
          type: integer
          example: 23
        psnuId:
         type: integer
         example: 100
    ScreenList:
      type: array
      title: "Screen Simple List"
      items:
        $ref: '#/components/schemas/ScreenBody'
    ScreenListWithPages:
      type: array
      title: "Screen List with Pagination"
      items:
        properties:
          content:
            type: array
            items:
              $ref: '#/components/schemas/ScreenBody'
          pageable:
            type: object
            properties:
              sort:
                type: object
                properties:
                  sorted:
                    type: boolean
                    example: false
                  empty:
                    type: boolean
                    example: true
                  unsorted:
                    type: boolean
                    example: true
              pageSize:
                type: integer
                example: 20
              pageNumber:
                type: integer
                example: 0
              offset:
                type: integer
                example: 0
              paged:
                type: boolean
                example: true
              unpaged:
                type: boolean
                example: false
          totalPages: 
            type: integer
            example: 1
          totalElements:
            type: integer
            example: 2
          last:
            type: boolean
            example: true
          number: 
            type: integer
            example: 0
          size:
            type: integer
            example: 0
          numberOfElements:
            type: integer
            example: 2
    WardObject:
      type: object
      title: "Ward Object"
      description: "Ward Object Structure"
      properties:
        id:
          type: integer
          example: 574
        name:
          type: string
          example: "Ubaruku"
        code:
          type: string
          example: "W0000"
        psnu:
          $ref: '#/components/schemas/PSNU'
    WardQuery:
      type: object
      title: "Ward Query"
      description: "Ward query parameters"
      properties:
        name:
          type: string
          example: "Baruku"
        code:
          type: string
          example: "W0009"
        psnuId:
          type: integer
          example: 7
    WardList:
      type: array
      title: "Ward list"
      description: "Ward list structure"
      items:
        $ref: '#/components/schemas/WardObject'
    PeriodObject:
      type: object
      title: "Period Object"
      description: "Object representing period structure"
      properties:
        id:
          type: integer
          example: 574
        startDate:
          type: string
          example: "2021-10-01"
        endDate:
          type: string
          example: "2021-12-31"
        closed:
          type: boolean
          example: false
        timeCreated:
          type: string
          example: "2022-02-16T17:34:50.682676" 
        lastUpdated:
          type: string
          example: "2022-02-16T17:34:50.682602" 
    PeriodQuery:
      type: object
      title: "Period Query"
      description: "Query structure for period"
      properties:
        name:
          type: string
          example: "FY22Q1"
        startDateFrom:
          type: string
          example: "2022-02-16"
        startDateTo:
          type: string
          example: "2022-02-16"
        endDateFrom:
          type: string
          example: "2022-02-17"
        endDateTo:
          type: string
          example: "2022-02-19"
        closed:
          type: boolean
          example: false
    ListPeriods:
      type: array
      title: "List of periods"
      description: "Period list structure"
      items:
        $ref: '#/components/schemas/PeriodObject'
    Need:
      type: object
      title: "Need Object"
      description: "Object for need"
      properties:
        date: 
          type: string
          format: date("yyy-mm-dd")
        enrollment:
          $ref: '#/components/schemas/Enrollment'
        service:
          $ref: '#/components/schemas/Service'
        resolved:
          type: boolean
    NeedCreate:
      type: object
      title: "Need Object for creating"
      description: "Object for need creation"
      properties:
        date: 
          type: string
          format: date("yyy-mm-dd")
        enrollment:
          type: integer
        service:
          type: integer
        resolved:
          type: boolean
    NeedCreateList:
      type: array
      items:
        $ref: '#/components/schemas/NeedCreate'
    NeedQuery:
      type: object
      title: "Need Query"
      description: "Object for need query params"
      properties:
        dateFrom: 
          type: string
          format: date("yyy-mm-dd")
        dateTo: 
          type: string
          format: date("yyy-mm-dd")
        enrollmentId:
          type: integer
        serviceId:
          type: integer
        resolved:
          type: boolean
    NeedList:
      type: array
      items:
        $ref: '#/components/schemas/Need'
    NeedListWithPages:
      type: array
      title: "Needs List with Pagination"
      items:
        properties:
          content:
            type: array
            items:
              $ref: '#/components/schemas/Need'
          pageable:
            type: object
            properties:
              sort:
                type: object
                properties:
                  sorted:
                    type: boolean
                    example: false
                  empty:
                    type: boolean
                    example: true
                  unsorted:
                    type: boolean
                    example: true
              pageSize:
                type: integer
                example: 20
              pageNumber:
                type: integer
                example: 0
              offset:
                type: integer
                example: 0
              paged:
                type: boolean
                example: true
              unpaged:
                type: boolean
                example: false
          totalPages: 
            type: integer
            example: 1
          totalElements:
            type: integer
            example: 2
          last:
            type: boolean
            example: true
          number: 
            type: integer
            example: 0
          size:
            type: integer
            example: 0
          numberOfElements:
            type: integer
            example: 2
    Target:
      type: object
      title: "Target Object"
      description: "Object for Target"
      properties:
        id:
          type: integer
        type:
          type: string
          description: "can be 'ENROLLMENT'/'PRIMARY_COMPLETION'"
        period:
          $ref: '#/components/schemas/PeriodObject'
        psnu:
          $ref: '#/components/schemas/PSNU'
        level:
          $ref: '#/components/schemas/level'
        count:
          type: integer
      
    TargetQuery:
      type: object
      title: "Target Query"
      description: "Object for Query Params"
      properties:
        type:
          type: string
          description: "can be 'ENROLLMENT'/'PRIMARY_COMPLETION'"
        periodId:
          type: integer
        psnuId:
          type: integer
        levelId:
          type: integer
          
    TargetList:
      type: array
      items:
        $ref: '#/components/schemas/Target'
        
    TargetListWithPages:
      type: array
      title: "Target List with Pagination"
      items:
        properties:
          content:
            type: array
            items:
              $ref: '#/components/schemas/Target'
          pageable:
            type: object
            properties:
              sort:
                type: object
                properties:
                  sorted:
                    type: boolean
                    example: false
                  empty:
                    type: boolean
                    example: true
                  unsorted:
                    type: boolean
                    example: true
              pageSize:
                type: integer
                example: 20
              pageNumber:
                type: integer
                example: 0
              offset:
                type: integer
                example: 0
              paged:
                type: boolean
                example: true
              unpaged:
                type: boolean
                example: false
          totalPages: 
            type: integer
            example: 1
          totalElements:
            type: integer
            example: 2
          last:
            type: boolean
            example: true
          number: 
            type: integer
            example: 0
          size:
            type: integer
            example: 0
          numberOfElements:
            type: integer
            example: 2
          
    Partner:
      type: object
      title: "Partner Object"
      description: "Object for partner"
      properties:
        id:
          type: integer
        name:
          type: string
        code:
          type: string
        csos:
          $ref: '#/components/schemas/CSOLists'
    PartnerCreate:
      type: object
      title: "Partner Create Object"
      description: "Object for creating partner"
      properties:
        name:
          type: string
        code:
          type: string
          
    PartnerQuery:
      type: object
      title: "Partner Query Params"
      description: "Query Object"
      properties:
        name:
          type: string
        code:
          type: string
          
    PartnerList:
      type: array
      title: "Partner list"
      items:
        $ref: '#/components/schemas/Partner'
          
    PartnerListWithPages:
      type: array
      title: "Partners List with Pagination"
      items:
        properties:
          content:
            type: array
            items:
              $ref: '#/components/schemas/Partner'
          pageable:
            type: object
            properties:
              sort:
                type: object
                properties:
                  sorted:
                    type: boolean
                    example: false
                  empty:
                    type: boolean
                    example: true
                  unsorted:
                    type: boolean
                    example: true
              pageSize:
                type: integer
                example: 20
              pageNumber:
                type: integer
                example: 0
              offset:
                type: integer
                example: 0
              paged:
                type: boolean
                example: true
              unpaged:
                type: boolean
                example: false
          totalPages: 
            type: integer
            example: 1
          totalElements:
            type: integer
            example: 2
          last:
            type: boolean
            example: true
          number: 
            type: integer
            example: 0
          size:
            type: integer
            example: 0
          numberOfElements:
            type: integer
            example: 2