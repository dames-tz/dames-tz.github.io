{
  "openapi" : "3.0.0",
  "info" : {
    "title" : "Dames Collect API",
    "description" : "Collect Api for dreams project",
    "contact" : {
      "name" : "Niafikra Group LTD",
      "url" : "http://niafikra.com/",
      "email" : "support@niafikra.com"
    },
    "version" : "1.0.0"
  },
  "servers" : [ {
    "url" : "http://localhost:8080/api/v1/dames"
  }, {
    "url" : "https://hjf.dames.co.tz/api/v1/dames"
  }, {
    "url" : "https://hjf.dames.co.tz:8181/api/v1/dames"
  } ],
  "paths" : {
    "/question" : {
      "description" : "Create Criterial Screening Question",
      "post" : {
        "description" : "Create Question",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateQuestionBody"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/QuestionBody"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/question/list" : {
      "description" : "Fetch all questions",
      "get" : {
        "description" : "Fetch all questions both active and non active",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/QuestionList"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/question/page" : {
      "description" : "Fetch all questions with pages",
      "get" : {
        "description" : "Fetch all questions both active and non active with pages",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/QuestionListWithPagination"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/question/list/active/" : {
      "description" : "Fetch active questions",
      "get" : {
        "description" : "Fetch all active questions",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/QuestionList"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/question/{code}/exists/" : {
      "description" : "Check if code exists",
      "get" : {
        "description" : "Check if question code exists",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "description" : "Pass Code you want to check.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          },
          "example" : "A123"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "boolean",
                  "example" : true
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/question/{code}/" : {
      "description" : "Get Question",
      "get" : {
        "description" : "Get Question",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "description" : "Pass Question Code.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          },
          "example" : "A123"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/QuestionBody"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/question/{code}/answers/" : {
      "description" : "Get answers",
      "get" : {
        "description" : "Get all question answers",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "description" : "Pass Question Code.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          },
          "example" : "A123"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AnswerList"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/question/{code}" : {
      "description" : "Update Question",
      "put" : {
        "description" : "Update Question",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "description" : "Pass Question Code.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          },
          "example" : "A123"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateQuestionBody"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/QuestionBody"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/question/{code}/answer/" : {
      "description" : "Add Answer",
      "put" : {
        "description" : "Add answer to the question",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "description" : "Pass Question Code.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          },
          "example" : "A123"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AnswerCreateBody"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/QuestionBody"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/question/answer/{id}/" : {
      "description" : "Update Answer",
      "put" : {
        "description" : "Update Answer",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Pass Answer Id.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer"
          },
          "example" : 23
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AnswerCreateBody"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AnswerBody"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/question/answer/{id}" : {
      "description" : "Delete Answer",
      "delete" : {
        "description" : "Delete Answer",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Pass Answer Id.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer"
          },
          "example" : 23
        } ],
        "responses" : {
          "202" : {
            "description" : "ACCEPTED"
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/screening" : {
      "description" : "Create Screening",
      "post" : {
        "description" : "Post Screening. What to consider agreed key should be check 'true' if the candidate agreed to be enrolled. If checked 'false' screening will never be linked with any enrollment.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ScreenCreateBody"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ScreenBody"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/screening/list" : {
      "description" : "Fetch all screening",
      "get" : {
        "description" : "Fetch all screening",
        "parameters" : [ {
          "name" : "query",
          "in" : "query",
          "description" : "You can Query data with following format",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "$ref" : "#/components/schemas/ScreenQuery"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ScreenList"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/screening/page" : {
      "description" : "Fetch all screening in oages",
      "get" : {
        "description" : "Fetch all screening in pages",
        "parameters" : [ {
          "name" : "query",
          "in" : "query",
          "description" : "You can Query data with following format",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "$ref" : "#/components/schemas/ScreenQuery"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ScreenListWithPages"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/screening/{id}/" : {
      "description" : "Update Screening",
      "put" : {
        "description" : "Update Screening",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Pass Screen Id.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer"
          },
          "example" : 7
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ScreenCreateBody"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ScreenBody"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/screening/{id}/response" : {
      "description" : "Add Response to Screening",
      "put" : {
        "description" : "Add Response to Screening",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Pass Screen Id.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer"
          },
          "example" : 7
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ResponseCreateBody"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ScreenBody"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/screening/response/{id}" : {
      "description" : "Remove Response from Screening",
      "delete" : {
        "description" : "Remove Response from Screening",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Pass Screen Id.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer"
          },
          "example" : 70
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ScreenBody"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/screening/{id}" : {
      "description" : "Delete Screening",
      "delete" : {
        "description" : "Delete Not Enrolled Screening",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Pass Screening Id.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer"
          },
          "example" : 23
        } ],
        "responses" : {
          "202" : {
            "description" : "ACCEPTED"
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/screening/count/" : {
      "description" : "Count screens from query",
      "get" : {
        "description" : "Count screens from query",
        "parameters" : [ {
          "name" : "query",
          "in" : "query",
          "description" : "Any or All of: dateFrom('dd-mm-yyyy'),dateTo('dd-mm-yyyy'),street,ward,eligible,agreed,enrollmentCode,decliningReason.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "$ref" : "#/components/schemas/ScreenQuery"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/text" : {
                "schema" : {
                  "type" : "integer",
                  "example" : 100
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/level/list" : {
      "description" : "List all levels",
      "get" : {
        "description" : "List all levels",
        "parameters" : [ {
          "name" : "query",
          "in" : "query",
          "description" : "You can Query data with following format",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "$ref" : "#/components/schemas/levelQuery"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/levelSimpleList"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/level/page" : {
      "description" : "List Levels in page",
      "get" : {
        "description" : "List Levels in pages",
        "parameters" : [ {
          "name" : "query",
          "in" : "query",
          "description" : "You can Query data with following format",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "$ref" : "#/components/schemas/levelQuery"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/levelList"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/service/list" : {
      "description" : "List Services",
      "get" : {
        "description" : "Find services",
        "parameters" : [ {
          "name" : "query",
          "in" : "query",
          "description" : "You can Query data with following format",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "$ref" : "#/components/schemas/ServiceQuery"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceSimpleList"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/service/{id}" : {
      "description" : "Get Service by ID",
      "get" : {
        "description" : "Pass Service Id to fetch Service Object",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Pass service id.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer"
          },
          "example" : 23
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Service"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/intervention/list" : {
      "description" : "List Interventions",
      "get" : {
        "description" : "List services",
        "parameters" : [ {
          "name" : "query",
          "in" : "query",
          "description" : "You can Query data with following format",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "$ref" : "#/components/schemas/InterventionQuery"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InterventionSimpleList"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/intervention/page" : {
      "description" : "List Intervention in page",
      "get" : {
        "description" : "List Intervention in pages",
        "parameters" : [ {
          "name" : "query",
          "in" : "query",
          "description" : "You can Query data with following format",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "$ref" : "#/components/schemas/InterventionQuery"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InterventionList"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/enrollment/codePattern" : {
      "description" : "Fetch code pattern",
      "get" : {
        "description" : "Fetch enrollment code pattern",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "text/plain" : {
                "schema" : {
                  "type" : "string",
                  "example" : "00-00-AA-AA"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/enrollment/{code}" : {
      "description" : "Create or Update Enrollment",
      "put" : {
        "description" : "Create or Update Enrollment, For new code will create but for existing one will update",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "description" : "Pass enrollment code.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          },
          "example" : 1234
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/EnrollmentPostOject"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Enrollment"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/enrollment/{code}/exist" : {
      "description" : "Check if code exists",
      "get" : {
        "description" : "Check if enrollment code exists",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "description" : "Pass new generated enrollment code",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "text/plain" : {
                "schema" : {
                  "type" : "boolean",
                  "example" : true
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/enrollment/{code}/" : {
      "description" : "Get Enrollment",
      "get" : {
        "description" : "Get enrollment by code",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "description" : "Pass enrollment code",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          },
          "example" : 123
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Enrollment"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/enrollment/bulk" : {
      "description" : "Post bulk enrollment.",
      "post" : {
        "description" : "Post bulk enrollment. Posting multiple enrollment objects at once",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/EnrollmentPostOjectList"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EnrollmentList"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/enrollment/list/" : {
      "description" : "Find all enrollments",
      "get" : {
        "description" : "Find all posted enrollments",
        "parameters" : [ {
          "name" : "query",
          "in" : "query",
          "description" : "You can Query data from as any of these keys",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "$ref" : "#/components/schemas/EnrollmentQuery"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EnrollmentList"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/enrollment/count/" : {
      "description" : "Count enrollments from query",
      "get" : {
        "description" : "Count enrollments from query",
        "parameters" : [ {
          "name" : "query",
          "in" : "query",
          "description" : "You can Query data from as any of these keys. It shall return whole count if nothing passed",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "$ref" : "#/components/schemas/EnrollmentQuery"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/text" : {
                "schema" : {
                  "type" : "integer",
                  "example" : 10
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/enrollment/minimumAge" : {
      "description" : "get minimum age from level",
      "get" : {
        "description" : "get minimum age from level",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/text" : {
                "schema" : {
                  "type" : "integer",
                  "example" : 6
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/enrollment/maximumAge" : {
      "description" : "get maximum age from level",
      "get" : {
        "description" : "get maximum age from level",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/text" : {
                "schema" : {
                  "type" : "integer",
                  "example" : 46
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/encounter" : {
      "description" : "Create Encounter",
      "post" : {
        "description" : "Create Encounter",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/EncounterPostObject"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "CREATED",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Encounter"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/encounter/bulk" : {
      "description" : "Create Encounter in bulk",
      "post" : {
        "description" : "Create Encounter in bulk",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/EncounterPostListObject"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "CREATED",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EncounterList"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/encounter/list/" : {
      "description" : "Find all encounters",
      "get" : {
        "description" : "Find all posted encounters by logged user",
        "parameters" : [ {
          "name" : "query",
          "in" : "query",
          "description" : "You can Query data from as any of these keys. It shall return everything if nothing passed.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "$ref" : "#/components/schemas/EncounterQuery"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EncounterList"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/encounter/count/" : {
      "description" : "Count encounters from query",
      "get" : {
        "description" : "Count encounters from query",
        "parameters" : [ {
          "name" : "query",
          "in" : "query",
          "description" : "You can Query data from as any of these keys. It shall return all count if nothing passed",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "$ref" : "#/components/schemas/EncounterQuery"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/text" : {
                "schema" : {
                  "type" : "integer",
                  "example" : 10
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/encounter/page/" : {
      "description" : "Find all encounters in page",
      "get" : {
        "description" : "Find all posted encounters by logged user in page",
        "parameters" : [ {
          "name" : "query",
          "in" : "query",
          "description" : "You can Query data from as any of these keys. It shall return all count if nothing passed",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "$ref" : "#/components/schemas/EncounterQuery"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EncounterList"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/encounter/{id}" : {
      "description" : "Delete Encounter",
      "delete" : {
        "description" : "Delete Encounter",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Pass Encounter id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer"
          },
          "example" : 100
        } ],
        "responses" : {
          "202" : {
            "description" : "ACCEPTED"
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    }
  },
  "components" : {
    "schemas" : {
      "level" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer"
          },
          "name" : {
            "type" : "string",
            "example" : "10-20"
          },
          "ageForm" : {
            "type" : "integer",
            "example" : 10
          },
          "ageTo" : {
            "type" : "integer",
            "example" : 20
          },
          "category" : {
            "type" : "string",
            "example" : "adult"
          }
        }
      },
      "levelQuery" : {
        "title" : "Level Query Params",
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "startAgeFrom" : {
            "type" : "integer",
            "description" : "Fill with startAgeTo"
          },
          "startAgeTo" : {
            "type" : "integer",
            "description" : "Fill with startAgeFrom"
          },
          "endAgeFrom" : {
            "type" : "integer",
            "description" : "Fill with endAgeTo"
          },
          "endAgeTo" : {
            "type" : "integer",
            "description" : "Fill with endAgeFrom"
          },
          "categoryId" : {
            "type" : "integer"
          }
        }
      },
      "levelList" : {
        "title" : "Level List Object with Pages",
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/levelList_inner"
        }
      },
      "levelSimpleList" : {
        "title" : "Level List Object",
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/level"
        }
      },
      "Stage" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "example" : 290
          },
          "order" : {
            "type" : "integer",
            "example" : 1
          },
          "name" : {
            "type" : "string",
            "example" : "initial"
          },
          "code" : {
            "type" : "string",
            "example" : "1234"
          }
        }
      },
      "Service" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "example" : 5
          },
          "name" : {
            "type" : "string"
          },
          "code" : {
            "type" : "string"
          },
          "category" : {
            "type" : "string",
            "example" : "First category"
          },
          "stages" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Service_stages"
            }
          }
        }
      },
      "ServiceSimpleList" : {
        "title" : "Service Simple List Object",
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/ServiceSimpleList_inner"
        }
      },
      "ServiceQuery" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "code" : {
            "type" : "string"
          }
        }
      },
      "ServiceList" : {
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/ServiceList_inner"
        }
      },
      "Intervention" : {
        "title" : "Intervention Object",
        "type" : "object",
        "properties" : {
          "level" : {
            "$ref" : "#/components/schemas/level"
          },
          "category" : {
            "type" : "string"
          },
          "service" : {
            "$ref" : "#/components/schemas/Service"
          },
          "mandatory" : {
            "type" : "boolean",
            "example" : true
          }
        }
      },
      "InterventionQuery" : {
        "title" : "Intervention Query Params",
        "type" : "object",
        "properties" : {
          "categoryId" : {
            "type" : "integer"
          },
          "levelId" : {
            "type" : "integer"
          },
          "serviceId" : {
            "type" : "integer"
          },
          "mandatory" : {
            "type" : "boolean",
            "example" : false
          }
        }
      },
      "InterventionSimpleList" : {
        "title" : "Intervention Simple List",
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/Intervention"
        }
      },
      "InterventionList" : {
        "title" : "Intervention List with Pagination",
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/InterventionList_inner"
        }
      },
      "PredefinedData" : {
        "title" : "Predfined Data Object",
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer"
          },
          "question" : {
            "type" : "string"
          },
          "answer" : {
            "type" : "string"
          },
          "originalAnswer" : {
            "type" : "string"
          },
          "memberOf" : {
            "$ref" : "#/components/schemas/PredefinedData"
          },
          "systemDefined" : {
            "type" : "boolean",
            "example" : true
          },
          "timecreated" : {
            "type" : "string",
            "format" : "date-time"
          },
          "lastUpdated" : {
            "type" : "string",
            "format" : "date-time"
          }
        }
      },
      "SNU" : {
        "title" : "SNU object",
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer"
          },
          "name" : {
            "type" : "string"
          },
          "code" : {
            "type" : "string"
          }
        }
      },
      "PSNU" : {
        "title" : "PSNU Object",
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer"
          },
          "name" : {
            "type" : "string"
          },
          "code" : {
            "type" : "string"
          },
          "snu" : {
            "$ref" : "#/components/schemas/SNU"
          }
        }
      },
      "PSNUSimpleList" : {
        "title" : "PSNU Simple List",
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/PSNU"
        }
      },
      "CSO" : {
        "title" : "CSO Object",
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "object"
          },
          "name" : {
            "type" : "string"
          },
          "code" : {
            "type" : "string"
          },
          "supportedLevels" : {
            "$ref" : "#/components/schemas/levelSimpleList"
          },
          "supportedPSNU" : {
            "$ref" : "#/components/schemas/PSNUSimpleList"
          }
        }
      },
      "Enrollment" : {
        "title" : "Enrollment Object",
        "type" : "object",
        "properties" : {
          "timeEnrolled" : {
            "type" : "string",
            "format" : "date-time"
          },
          "code" : {
            "type" : "string",
            "example" : "123"
          },
          "firstName" : {
            "type" : "string"
          },
          "lastName" : {
            "type" : "string"
          },
          "phoneNumber" : {
            "type" : "string"
          },
          "dateOfBirth" : {
            "type" : "string",
            "format" : "date"
          },
          "ward" : {
            "$ref" : "#/components/schemas/PredefinedData"
          },
          "street" : {
            "type" : "string"
          },
          "cso" : {
            "type" : "string"
          },
          "psnu" : {
            "type" : "string"
          },
          "referral" : {
            "type" : "boolean",
            "example" : true
          },
          "referralFacility" : {
            "$ref" : "#/components/schemas/PredefinedData"
          },
          "level" : {
            "$ref" : "#/components/schemas/level"
          }
        }
      },
      "EnrollmentsListWithPagination" : {
        "title" : "Enrollment list with pagination",
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/EnrollmentsListWithPagination_inner"
        }
      },
      "EnrollmentQuery" : {
        "title" : "Enrollment Query Params",
        "type" : "object",
        "properties" : {
          "dateEnrolledForm" : {
            "type" : "string",
            "format" : "date-time('dd-MM-yyyy HH:mm:ss')",
            "example" : "01-12-2021 00:00:00"
          },
          "dateEnrolledTo" : {
            "type" : "string",
            "format" : "date-time('dd-MM-yyyy HH:mm:ss')",
            "example" : "12-01-2022 23:59:00"
          },
          "street" : {
            "type" : "string",
            "example" : "Mtakuja st."
          },
          "ward" : {
            "type" : "integer",
            "example" : 11
          },
          "firstName" : {
            "type" : "string",
            "example" : "Jane"
          },
          "lastName" : {
            "type" : "string",
            "example" : "Doe"
          }
        }
      },
      "EnrollmentPostOject" : {
        "title" : "Enrollment Create/Update Object",
        "required" : [ "code", "cso", "dateOfBirth", "firstName", "lastName", "level", "phoneNumber", "psnu", "street", "timeEnrolled", "ward" ],
        "type" : "object",
        "properties" : {
          "timeEnrolled" : {
            "type" : "string",
            "format" : "date-time"
          },
          "firstName" : {
            "type" : "string"
          },
          "lastName" : {
            "type" : "string"
          },
          "phoneNumber" : {
            "type" : "string"
          },
          "dateOfBirth" : {
            "type" : "string",
            "format" : "date('yyyy-mm-dd')",
            "example" : "2020-10-02"
          },
          "level" : {
            "type" : "integer",
            "example" : 2
          },
          "ward" : {
            "type" : "integer",
            "example" : 3
          },
          "street" : {
            "type" : "integer",
            "example" : 1
          },
          "cso" : {
            "type" : "integer",
            "example" : 13
          },
          "psnu" : {
            "type" : "integer",
            "example" : 112
          },
          "referral" : {
            "type" : "boolean",
            "description" : "If this is true, make sure you provide referral facility",
            "example" : false
          },
          "referralFacility" : {
            "type" : "integer",
            "description" : "Can be null if referral is marked false"
          }
        },
        "description" : "Used during posting"
      },
      "EnrollmentPostObjectForList" : {
        "title" : "Enrollment Create/Update Object for list",
        "required" : [ "code", "dateOfBirth", "firstName", "lastName", "level", "phoneNumber", "street", "timeEnrolled", "ward" ],
        "type" : "object",
        "properties" : {
          "timeEnrolled" : {
            "type" : "string",
            "format" : "date",
            "example" : "2021-12-12"
          },
          "firstName" : {
            "type" : "string"
          },
          "lastName" : {
            "type" : "string"
          },
          "phoneNumber" : {
            "type" : "string"
          },
          "dateOfBirth" : {
            "type" : "string",
            "format" : "date('yyyy-mm-dd')",
            "example" : "2010-12-12"
          },
          "level" : {
            "type" : "integer",
            "example" : 2
          },
          "ward" : {
            "type" : "integer",
            "example" : 3
          },
          "street" : {
            "type" : "integer",
            "example" : 1
          },
          "referral" : {
            "type" : "boolean",
            "example" : false
          },
          "referralFacility" : {
            "type" : "integer",
            "example" : 17
          },
          "code" : {
            "type" : "string",
            "example" : "112"
          }
        },
        "description" : "Used during posting bulk enrollments"
      },
      "EnrollmentPostOjectList" : {
        "title" : "Enrollment Create/Update Bulk List",
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/EnrollmentPostObjectForList"
        }
      },
      "EnrollmentList" : {
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/Enrollment"
        }
      },
      "Encounter" : {
        "title" : "Encounter Object",
        "type" : "object",
        "properties" : {
          "enrollment" : {
            "$ref" : "#/components/schemas/Enrollment"
          },
          "stage" : {
            "$ref" : "#/components/schemas/Stage"
          },
          "date" : {
            "type" : "string",
            "format" : "YYYY-MM-DD"
          }
        }
      },
      "EncounterList" : {
        "title" : "Encounter Simple List",
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/Encounter"
        }
      },
      "EncounterListWithPagination" : {
        "title" : "Encounter List with Pagination",
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/EncounterListWithPagination_inner"
        }
      },
      "EncounterPostObject" : {
        "title" : "Encounter Create/Update Object",
        "required" : [ "date", "enrollment", "stage" ],
        "type" : "object",
        "properties" : {
          "date" : {
            "type" : "string",
            "format" : "date('yyyy-mm-dd')",
            "example" : "2021-01-12"
          },
          "stage" : {
            "type" : "integer",
            "example" : 11
          },
          "enrollment" : {
            "type" : "string",
            "description" : "Enrollment code",
            "example" : "1234"
          }
        },
        "description" : "Used during posting"
      },
      "EncounterPostListObject" : {
        "title" : "Encounter Create/Update List Objects",
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/EncounterPostObject"
        }
      },
      "EncounterQuery" : {
        "title" : "Encounter Query Params",
        "type" : "object",
        "properties" : {
          "dateForm" : {
            "type" : "string",
            "format" : "date('dd-mm-yyyy')",
            "example" : "01-12-2021"
          },
          "dateTo" : {
            "type" : "string",
            "format" : "date('dd-mm-yyyy')",
            "example" : "12-02-2022"
          },
          "street" : {
            "type" : "string",
            "example" : "Mtakuja st."
          },
          "wardId" : {
            "type" : "integer",
            "example" : 11
          },
          "levelId" : {
            "type" : "integer",
            "example" : 8
          },
          "serviceId" : {
            "type" : "integer",
            "example" : 11
          }
        }
      },
      "GeneralStatObject" : {
        "type" : "object",
        "properties" : {
          "date" : {
            "type" : "string",
            "format" : "date('yyyy-mm-dd')",
            "example" : "2021-12-09"
          },
          "today" : {
            "type" : "integer",
            "example" : 7
          },
          "lastThirtyDays" : {
            "type" : "integer",
            "example" : 25
          },
          "total" : {
            "type" : "integer",
            "example" : 120
          }
        }
      },
      "CreateQuestionBody" : {
        "title" : "Query Create/Update Object",
        "required" : [ "active", "answers", "code", "order", "title" ],
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "string"
          },
          "title" : {
            "type" : "string"
          },
          "order" : {
            "type" : "integer"
          },
          "active" : {
            "type" : "boolean"
          },
          "answers" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AnswerCreateBody"
            }
          }
        },
        "description" : "Used during create and update question"
      },
      "QuestionBody" : {
        "title" : "Question Object",
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer"
          },
          "code" : {
            "type" : "string"
          },
          "title" : {
            "type" : "string"
          },
          "answers" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AnswerBody"
            }
          },
          "activeCriteria" : {
            "type" : "array",
            "description" : "Map of question and answer id. From which detrmines question visibility",
            "items" : {
              "$ref" : "#/components/schemas/QuestionBody_activeCriteria"
            }
          },
          "order" : {
            "type" : "integer"
          },
          "active" : {
            "type" : "boolean"
          }
        }
      },
      "AnswerBody" : {
        "title" : "Answer Object",
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer"
          },
          "title" : {
            "type" : "string"
          },
          "weight" : {
            "type" : "integer"
          },
          "order" : {
            "type" : "integer"
          }
        }
      },
      "AnswerCreateBody" : {
        "title" : "Answer Create/Update Object",
        "required" : [ "order", "title", "weight" ],
        "type" : "object",
        "properties" : {
          "title" : {
            "type" : "string"
          },
          "weight" : {
            "type" : "integer"
          },
          "order" : {
            "type" : "integer"
          }
        },
        "description" : "Used during create and update answer"
      },
      "QuestionList" : {
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/QuestionBody"
        }
      },
      "QuestionListWithPagination" : {
        "title" : "Question List with Pagination",
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/QuestionListWithPagination_inner"
        }
      },
      "AnswerList" : {
        "title" : "Answers Simple List",
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/AnswerBody"
        }
      },
      "ResponseBody" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "example" : 17
          },
          "mark" : {
            "type" : "integer",
            "example" : 1
          },
          "question" : {
            "$ref" : "#/components/schemas/QuestionBody"
          },
          "answer" : {
            "$ref" : "#/components/schemas/AnswerBody"
          }
        }
      },
      "ResponseCreateBody" : {
        "title" : "Response Create/Update Object",
        "required" : [ "answerId", "mark", "questionId" ],
        "type" : "object",
        "properties" : {
          "questionId" : {
            "type" : "integer"
          },
          "answerId" : {
            "type" : "integer"
          },
          "mark" : {
            "type" : "integer"
          }
        },
        "description" : "Used during create and update response"
      },
      "ScreenBody" : {
        "title" : "Screen Object",
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer"
          },
          "date" : {
            "type" : "string",
            "format" : "date"
          },
          "dateOfBirth" : {
            "type" : "string",
            "format" : "date('yyyy-mm-dd')",
            "example" : "2021-12-01"
          },
          "ward" : {
            "$ref" : "#/components/schemas/PredefinedData"
          },
          "street" : {
            "type" : "string"
          },
          "score" : {
            "type" : "integer"
          },
          "eligible" : {
            "type" : "boolean"
          },
          "agreed" : {
            "type" : "boolean"
          },
          "responses" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ResponseBody"
            }
          },
          "enrollment" : {
            "$ref" : "#/components/schemas/Enrollment"
          },
          "decliningReason" : {
            "$ref" : "#/components/schemas/PredefinedData"
          },
          "decliningReasonNotes" : {
            "type" : "string"
          }
        }
      },
      "ScreenCreateBody" : {
        "title" : "Screan Create/Update Object",
        "required" : [ "date", "dateOfBirth", "responses", "street", "ward" ],
        "type" : "object",
        "properties" : {
          "date" : {
            "type" : "string",
            "format" : "date"
          },
          "dateOfBirth" : {
            "type" : "string",
            "format" : "date"
          },
          "ward" : {
            "type" : "integer",
            "example" : 11
          },
          "street" : {
            "type" : "string",
            "example" : "Mazinde"
          },
          "agreed" : {
            "type" : "boolean"
          },
          "responses" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ResponseCreateBody"
            }
          },
          "enrollmentCode" : {
            "type" : "string"
          },
          "decliningReason" : {
            "type" : "integer"
          },
          "decliningReasonNotes" : {
            "type" : "string"
          }
        },
        "description" : "Used during create and update screen"
      },
      "ScreenQuery" : {
        "title" : "Screen Query Params",
        "type" : "object",
        "properties" : {
          "dateForm" : {
            "type" : "string",
            "format" : "date('dd-mm-yyyy')",
            "example" : "01-11-2021"
          },
          "dateTo" : {
            "type" : "string",
            "format" : "date('dd-mm-yyyy')",
            "example" : "20-12-2021"
          },
          "street" : {
            "type" : "string",
            "example" : "Mtakuja st."
          },
          "ward" : {
            "type" : "integer",
            "example" : 11
          },
          "eligible" : {
            "type" : "boolean",
            "example" : true
          },
          "agreed" : {
            "type" : "boolean",
            "example" : true
          },
          "enrollmentCode" : {
            "type" : "string",
            "example" : "A000000"
          },
          "decliningReason" : {
            "type" : "integer",
            "example" : 23
          }
        }
      },
      "ScreenList" : {
        "title" : "Screen Simple List",
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/ScreenBody"
        }
      },
      "ScreenListWithPages" : {
        "title" : "Screen List with Pagination",
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/ScreenListWithPages_inner"
        }
      },
      "levelList_inner" : {
        "properties" : {
          "content" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/level"
            }
          },
          "pageable" : {
            "type" : "object",
            "properties" : {
              "sort" : {
                "type" : "object",
                "properties" : {
                  "sorted" : {
                    "type" : "boolean",
                    "example" : false
                  },
                  "empty" : {
                    "type" : "boolean",
                    "example" : true
                  },
                  "unsorted" : {
                    "type" : "boolean",
                    "example" : true
                  }
                }
              },
              "pageSize" : {
                "type" : "integer",
                "example" : 20
              },
              "pageNumber" : {
                "type" : "integer",
                "example" : 0
              },
              "offset" : {
                "type" : "integer",
                "example" : 0
              },
              "paged" : {
                "type" : "boolean",
                "example" : true
              },
              "unpaged" : {
                "type" : "boolean",
                "example" : false
              }
            }
          },
          "totalPages" : {
            "type" : "integer",
            "example" : 1
          },
          "totalElements" : {
            "type" : "integer",
            "example" : 2
          },
          "last" : {
            "type" : "boolean",
            "example" : true
          },
          "number" : {
            "type" : "integer",
            "example" : 0
          },
          "size" : {
            "type" : "integer",
            "example" : 0
          },
          "numberOfElements" : {
            "type" : "integer",
            "example" : 2
          }
        }
      },
      "Service_stages" : {
        "properties" : {
          "stage" : {
            "$ref" : "#/components/schemas/Stage"
          }
        },
        "example" : null
      },
      "ServiceSimpleList_inner" : {
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "category" : {
            "type" : "string"
          },
          "stages" : {
            "$ref" : "#/components/schemas/Stage"
          }
        }
      },
      "ServiceList_inner" : {
        "properties" : {
          "content" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Service"
            }
          },
          "pageable" : {
            "type" : "object",
            "properties" : {
              "sort" : {
                "type" : "object",
                "properties" : {
                  "sorted" : {
                    "type" : "boolean",
                    "example" : false
                  },
                  "empty" : {
                    "type" : "boolean",
                    "example" : true
                  },
                  "unsorted" : {
                    "type" : "boolean",
                    "example" : true
                  }
                }
              },
              "pageSize" : {
                "type" : "integer",
                "example" : 20
              },
              "pageNumber" : {
                "type" : "integer",
                "example" : 0
              },
              "offset" : {
                "type" : "integer",
                "example" : 0
              },
              "paged" : {
                "type" : "boolean",
                "example" : true
              },
              "unpaged" : {
                "type" : "boolean",
                "example" : false
              }
            }
          },
          "totalPages" : {
            "type" : "integer",
            "example" : 1
          },
          "totalElements" : {
            "type" : "integer",
            "example" : 2
          },
          "last" : {
            "type" : "boolean",
            "example" : true
          },
          "number" : {
            "type" : "integer",
            "example" : 0
          },
          "size" : {
            "type" : "integer",
            "example" : 0
          },
          "numberOfElements" : {
            "type" : "integer",
            "example" : 2
          }
        }
      },
      "InterventionList_inner" : {
        "properties" : {
          "content" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Intervention"
            }
          },
          "pageable" : {
            "type" : "object",
            "properties" : {
              "sort" : {
                "type" : "object",
                "properties" : {
                  "sorted" : {
                    "type" : "boolean",
                    "example" : false
                  },
                  "empty" : {
                    "type" : "boolean",
                    "example" : true
                  },
                  "unsorted" : {
                    "type" : "boolean",
                    "example" : true
                  }
                }
              },
              "pageSize" : {
                "type" : "integer",
                "example" : 20
              },
              "pageNumber" : {
                "type" : "integer",
                "example" : 0
              },
              "offset" : {
                "type" : "integer",
                "example" : 0
              },
              "paged" : {
                "type" : "boolean",
                "example" : true
              },
              "unpaged" : {
                "type" : "boolean",
                "example" : false
              }
            }
          },
          "totalPages" : {
            "type" : "integer",
            "example" : 1
          },
          "totalElements" : {
            "type" : "integer",
            "example" : 2
          },
          "last" : {
            "type" : "boolean",
            "example" : true
          },
          "number" : {
            "type" : "integer",
            "example" : 0
          },
          "size" : {
            "type" : "integer",
            "example" : 0
          },
          "numberOfElements" : {
            "type" : "integer",
            "example" : 2
          }
        }
      },
      "EnrollmentsListWithPagination_inner" : {
        "properties" : {
          "content" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Enrollment"
            }
          },
          "pageable" : {
            "type" : "object",
            "properties" : {
              "sort" : {
                "type" : "object",
                "properties" : {
                  "sorted" : {
                    "type" : "boolean",
                    "example" : false
                  },
                  "empty" : {
                    "type" : "boolean",
                    "example" : true
                  },
                  "unsorted" : {
                    "type" : "boolean",
                    "example" : true
                  }
                }
              },
              "pageSize" : {
                "type" : "integer",
                "example" : 20
              },
              "pageNumber" : {
                "type" : "integer",
                "example" : 0
              },
              "offset" : {
                "type" : "integer",
                "example" : 0
              },
              "paged" : {
                "type" : "boolean",
                "example" : true
              },
              "unpaged" : {
                "type" : "boolean",
                "example" : false
              }
            }
          },
          "totalPages" : {
            "type" : "integer",
            "example" : 1
          },
          "totalElements" : {
            "type" : "integer",
            "example" : 2
          },
          "last" : {
            "type" : "boolean",
            "example" : true
          },
          "number" : {
            "type" : "integer",
            "example" : 0
          },
          "size" : {
            "type" : "integer",
            "example" : 0
          },
          "numberOfElements" : {
            "type" : "integer",
            "example" : 2
          }
        }
      },
      "EncounterListWithPagination_inner" : {
        "properties" : {
          "content" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Encounter"
            }
          },
          "pageable" : {
            "type" : "object",
            "properties" : {
              "sort" : {
                "type" : "object",
                "properties" : {
                  "sorted" : {
                    "type" : "boolean",
                    "example" : false
                  },
                  "empty" : {
                    "type" : "boolean",
                    "example" : true
                  },
                  "unsorted" : {
                    "type" : "boolean",
                    "example" : true
                  }
                }
              },
              "pageSize" : {
                "type" : "integer",
                "example" : 20
              },
              "pageNumber" : {
                "type" : "integer",
                "example" : 0
              },
              "offset" : {
                "type" : "integer",
                "example" : 0
              },
              "paged" : {
                "type" : "boolean",
                "example" : true
              },
              "unpaged" : {
                "type" : "boolean",
                "example" : false
              }
            }
          },
          "totalPages" : {
            "type" : "integer",
            "example" : 1
          },
          "totalElements" : {
            "type" : "integer",
            "example" : 2
          },
          "last" : {
            "type" : "boolean",
            "example" : true
          },
          "number" : {
            "type" : "integer",
            "example" : 0
          },
          "size" : {
            "type" : "integer",
            "example" : 0
          },
          "numberOfElements" : {
            "type" : "integer",
            "example" : 2
          }
        }
      },
      "QuestionBody_activeCriteria" : {
        "type" : "object",
        "properties" : {
          "questionId" : {
            "type" : "integer"
          },
          "answerId" : {
            "type" : "integer"
          }
        },
        "example" : null
      },
      "QuestionListWithPagination_inner" : {
        "properties" : {
          "content" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/QuestionBody"
            }
          },
          "pageable" : {
            "type" : "object",
            "properties" : {
              "sort" : {
                "type" : "object",
                "properties" : {
                  "sorted" : {
                    "type" : "boolean",
                    "example" : false
                  },
                  "empty" : {
                    "type" : "boolean",
                    "example" : true
                  },
                  "unsorted" : {
                    "type" : "boolean",
                    "example" : true
                  }
                }
              },
              "pageSize" : {
                "type" : "integer",
                "example" : 20
              },
              "pageNumber" : {
                "type" : "integer",
                "example" : 0
              },
              "offset" : {
                "type" : "integer",
                "example" : 0
              },
              "paged" : {
                "type" : "boolean",
                "example" : true
              },
              "unpaged" : {
                "type" : "boolean",
                "example" : false
              }
            }
          },
          "totalPages" : {
            "type" : "integer",
            "example" : 1
          },
          "totalElements" : {
            "type" : "integer",
            "example" : 2
          },
          "last" : {
            "type" : "boolean",
            "example" : true
          },
          "number" : {
            "type" : "integer",
            "example" : 0
          },
          "size" : {
            "type" : "integer",
            "example" : 0
          },
          "numberOfElements" : {
            "type" : "integer",
            "example" : 2
          }
        }
      },
      "ScreenListWithPages_inner" : {
        "properties" : {
          "content" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ScreenBody"
            }
          },
          "pageable" : {
            "type" : "object",
            "properties" : {
              "sort" : {
                "type" : "object",
                "properties" : {
                  "sorted" : {
                    "type" : "boolean",
                    "example" : false
                  },
                  "empty" : {
                    "type" : "boolean",
                    "example" : true
                  },
                  "unsorted" : {
                    "type" : "boolean",
                    "example" : true
                  }
                }
              },
              "pageSize" : {
                "type" : "integer",
                "example" : 20
              },
              "pageNumber" : {
                "type" : "integer",
                "example" : 0
              },
              "offset" : {
                "type" : "integer",
                "example" : 0
              },
              "paged" : {
                "type" : "boolean",
                "example" : true
              },
              "unpaged" : {
                "type" : "boolean",
                "example" : false
              }
            }
          },
          "totalPages" : {
            "type" : "integer",
            "example" : 1
          },
          "totalElements" : {
            "type" : "integer",
            "example" : 2
          },
          "last" : {
            "type" : "boolean",
            "example" : true
          },
          "number" : {
            "type" : "integer",
            "example" : 0
          },
          "size" : {
            "type" : "integer",
            "example" : 0
          },
          "numberOfElements" : {
            "type" : "integer",
            "example" : 2
          }
        }
      }
    },
    "securitySchemes" : {
      "basicAuth" : {
        "type" : "http",
        "scheme" : "basic"
      }
    }
  }
}